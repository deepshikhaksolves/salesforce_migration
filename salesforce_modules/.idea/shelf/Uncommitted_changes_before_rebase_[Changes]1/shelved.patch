Index: ../salesforce_connector/models/saleforce_sync_logs.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\n\r\nfrom odoo import models, fields\r\n\r\n\r\nclass SalesForceSyncHistory(models.Model):\r\n\r\n    _name = 'salesforce.sync.history'\r\n    _order = 'sync_date desc'\r\n    _description = 'Salesforce Sync History'\r\n\r\n    type = fields.Selection([('Account', 'Account'), ('Contact', 'Contact'), ('Individual', 'Individual'),\r\n                            ('PartnerNetworkConnection', 'PartnerNetworkConnection'), ('Rep__c', 'Rep__c'),\r\n                             ('Pricebook2', 'Pricebook2'), ('Opportunity', 'Opportunity'),\r\n                             ('Lead', 'Lead'),('Task','Task')], string=\"Type\")\r\n    sf_id = fields.Char('Salesforce Record Id', readonly=True, default=0)\r\n    sync_date = fields.Datetime('Sync Date', readonly=True, required=True, default=fields.Datetime.now)\r\n    operation = fields.Selection([('salesforce_to_odoo', 'Salesforce to Odoo')],\r\n                                    string=\"Operation\")\r\n    status = fields.Selection([('success', 'Success'), ('failed', 'Failed')], string=\"Operation Status\")\r\n    message = fields.Text('Summary')\r\n\r\n    def create_log_param(self, type, sf_id, status, operation, message=False):\r\n        \"\"\"\r\n        \"\"\"\r\n        params = {\r\n            'type': type,\r\n            'sf_id': sf_id,\r\n            'operation': operation,\r\n            'message': message,\r\n            'status': status\r\n        }\r\n        self.sudo().create(params)\r\n\r\n\r\n    # no_of_orders_sync = fields.Integer('Sync SalesOrders', readonly=True)\r\n    # no_of_products_sync = fields.Integer('Sync Products', readonly=True)\r\n    # no_of_customers_sync = fields.Integer('Sync Customers', readonly=True)\r\n    # no_of_opportunities_sync = fields.Integer('Sync Opportunities', readonly=True)\r\n    # document_link = fields.Char('Document Link', readonly=True)\r\n\r\n\r\n# class SalesForceFailedLog(models.Model):\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../salesforce_connector/models/saleforce_sync_logs.py b/../salesforce_connector/models/saleforce_sync_logs.py
--- a/../salesforce_connector/models/saleforce_sync_logs.py	(revision 1d212c13d7678383144751f05cf4ef0c2c556b0b)
+++ b/../salesforce_connector/models/saleforce_sync_logs.py	(date 1632729825463)
@@ -9,10 +9,7 @@
     _order = 'sync_date desc'
     _description = 'Salesforce Sync History'
 
-    type = fields.Selection([('Account', 'Account'), ('Contact', 'Contact'), ('Individual', 'Individual'),
-                            ('PartnerNetworkConnection', 'PartnerNetworkConnection'), ('Rep__c', 'Rep__c'),
-                             ('Pricebook2', 'Pricebook2'), ('Opportunity', 'Opportunity'),
-                             ('Lead', 'Lead'),('Task','Task')], string="Type")
+    type = fields.Char(string="Type")
     sf_id = fields.Char('Salesforce Record Id', readonly=True, default=0)
     sync_date = fields.Datetime('Sync Date', readonly=True, required=True, default=fields.Datetime.now)
     operation = fields.Selection([('salesforce_to_odoo', 'Salesforce to Odoo')],
Index: ../salesforce_connector/views/crm_lead_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<odoo>\r\n    <data>\r\n        <record model=\"ir.ui.view\" id=\"Lead_form_inherit\">\r\n            <field name=\"name\">lead.form.inherit</field>\r\n            <field name=\"model\">crm.lead</field>\r\n            <field name=\"inherit_id\" ref=\"crm.crm_lead_view_form\"/>\r\n            <field name=\"arch\" type=\"xml\">\r\n                <xpath expr=\"//sheet//group/group[2]/field[@name='phone']\" position=\"after\">\r\n                    <field name=\"RFQ_type\"/>\r\n                </xpath>\r\n                <page name=\"extra\" position=\"after\">\r\n                    <page name=\"salesforce\" string=\"SalesForce Details\"\r\n                          attrs=\"{'invisible': ['|',('sf_id', '=', False),('type','=','opportunity')]}\">\r\n                        <group>\r\n                            <group>\r\n                                <field name=\"sf_id\" string=\"Sf Lead Id\"/>\r\n                            </group>\r\n                            <group>\r\n                                <field name=\"sf_name\"/>\r\n                            </group>\r\n                        </group>\r\n                        <group>\r\n                            <group>\r\n                                <field name=\"sf_assembly_amount\"/>\r\n                                <field name=\"sf_assembly\"/>\r\n                                <field name=\"sf_amount\"/>\r\n                                <field name=\"sf_blanket_order\"/>\r\n                                <field name=\"sf_buyer_feedback\"/>\r\n                                <field name=\"sf_connection_rcv_id\"/>\r\n                                <field name=\"sf_connection_snt_id\"/>\r\n                                <field name=\"sf_contact_id\"/>\r\n                                <field name=\"sf_buyer_notes_c\"/>\r\n\r\n                                <field name=\"sf_salesperson_id\"/>\r\n                                <field name=\"sf_created_by_id\"/>\r\n                                <field name=\"sf_last_modified_by_id\"/>\r\n                                <field name=\"sf_company_type\"/>\r\n                                <field name=\"sf_lead_expected_annual_spend__c\"/>\r\n                                <field name=\"sf_EmailBouncedDate\"/>\r\n                                <field name=\"sf_EmailBouncedReason\"/>\r\n                                <field name=\"sf_country\"/>\r\n                                <field name=\"sf_state\"/>\r\n                                <field name=\"sf_street\"/>\r\n                                <field name=\"sf_postal_code\"/>\r\n\r\n                            </group>\r\n                            <group>\r\n                                <field name=\"sf_description\"/>\r\n                                <field name=\"sf_comment\"/>\r\n                                <field name=\"sf_expected_order_val\"/>\r\n                                <field name=\"sf_feed_back\"/>\r\n                                <field name=\"sf_fiscal\"/>\r\n                                <field name=\"sf_fiscal_quarter\"/>\r\n                                <field name=\"sf_fiscal_year\"/>\r\n                                <field name=\"sf_comment_2__c\"/>\r\n                                <field name=\"sf_lead_source\"/>\r\n                                <field name=\"sf_title\"/>\r\n                                <field name=\"sf_is_converted\"/>\r\n\r\n                                <field name=\"sf_is_deleted\"/>\r\n                                <field name=\"sf_created_date\"/>\r\n                                <field name=\"sf_last_modified_date\"/>\r\n                                <!--<field name=\"sf_open_date\"/>-->\r\n                                <!--<field name=\"sf_quote_type__c\"/>-->\r\n                                <field name=\"sf_stencil_amount\"/>\r\n                                <field name=\"sf_lead_stencil__c\"/>\r\n                                <field name=\"sf_lead_stencil_notes__c\"/>\r\n                                <field name=\"sf_tariff_amount\"/>\r\n                            </group>\r\n                        </group>\r\n                    </page>\r\n                </page>\r\n            </field>\r\n        </record>\r\n\r\n        <record model=\"ir.ui.view\" id=\"opportunity_form_inherit\">\r\n            <field name=\"name\">opportunity.form.inherit</field>\r\n            <field name=\"model\">crm.lead</field>\r\n            <field name=\"inherit_id\" ref=\"sale_crm.crm_case_form_view_oppor\"/>\r\n            <field name=\"arch\" type=\"xml\">\r\n                <page name=\"lead\" position=\"after\">\r\n                    <page name=\"salesforce\" string=\"SalesForce Details\" attrs=\"{'invisible': ['|',('sf_id', '=', False),('type','=','lead')]}\">\r\n                        <group>\r\n                            <group>\r\n                                <field name=\"sf_id\"/>\r\n                            </group>\r\n                            <group>\r\n                                <field name=\"sf_name\"/>\r\n                            </group>\r\n                        </group>\r\n                        <group>\r\n                            <group>\r\n                                <field name=\"sf_assembly_amount\"/>\r\n                                <field name=\"sf_assembly\"/>\r\n                                <field name=\"sf_amount\"/>\r\n                                <field name=\"sf_blanket_order\"/>\r\n                                <field name=\"sf_buyer_feedback\"/>\r\n                                <field name=\"sf_connection_rcv_id\"/>\r\n                                <field name=\"sf_connection_snt_id\"/>\r\n                                <field name=\"sf_salesperson_id\"/>\r\n                                <field name=\"sf_created_by_id\"/>\r\n                                <field name=\"sf_last_modified_by_id\"/>\r\n                                <field name=\"sf_contact_id\"/>\r\n                                <field name=\"sf_description\"/>\r\n                                <field name=\"sf_company_type\"/>\r\n                                <field name=\"sf_comment\"/>\r\n                                <field name=\"sf_expected_order_val\"/>\r\n                                <field name=\"sf_feed_back\"/>\r\n                                <field name=\"sf_fiscal\"/>\r\n                                <field name=\"sf_fiscal_quarter\"/>\r\n                                <field name=\"sf_fiscal_year\"/>\r\n                            </group>\r\n                            <group>\r\n                                <field name=\"sf_forecast_category\"/>\r\n                                <!--\r\n                                <field name=\"sf_forecast_cat_name\"/>\r\n                                -->\r\n                                <field name=\"sf_has_opn_activity\"/>\r\n                                <field name=\"sf_has_opp_lineitem\"/>\r\n                                <field name=\"sf_has_overduetask\"/>\r\n                                <field name=\"sf_is_closed\"/>\r\n                                <field name=\"sf_is_deleted\"/>\r\n                                <field name=\"sf_is_won\"/>\r\n                                <field name=\"sf_potential_customer\"/>\r\n                                <field name=\"sf_pcb_amount\"/>\r\n                                <!--<field name=\"sf_open_date\"/>-->\r\n                                <field name=\"sf_created_date\"/>\r\n                                <field name=\"sf_last_modified_date\"/>\r\n                                <field name=\"create_date\"/>\r\n                                <field name=\"date_conversion\"/>\r\n                                <field name=\"date_closed\"/>\r\n                                <field name=\"sf_closed_date\"/>\r\n                                <field name=\"sf_stencil__c\"/>\r\n                                <field name=\"sf_tariff_amount\"/>\r\n                                <field name=\"sf_stencil_amount\"/>\r\n                            </group>\r\n                        </group>\r\n                    </page>\r\n                </page>\r\n            </field>\r\n        </record>\r\n\r\n        <record model=\"ir.ui.view\" id=\"opportunity_form_inherit_search_view\">\r\n            <field name=\"name\">opportunity.form.search</field>\r\n            <field name=\"model\">crm.lead</field>\r\n            <field name=\"inherit_id\" ref=\"crm.view_crm_case_opportunities_filter\" />\r\n            <field name=\"arch\" type=\"xml\">\r\n                <filter name=\"stage\" position=\"after\">\r\n                    <filter string=\"RFQ Type\" name=\"RFQ_type\" context=\"{'group_by': 'RFQ_type'}\"/>\r\n                </filter>\r\n            </field>\r\n        </record>\r\n\r\n        <record model=\"ir.ui.view\" id=\"lead_form_inherit_view\">\r\n            <field name=\"name\">crm.lead.form.opportunity.inherit</field>\r\n            <field name=\"model\">crm.lead</field>\r\n            <field name=\"inherit_id\" ref=\"mcl_crm.crm_case_form_view_oppor\"/>\r\n            <field name=\"arch\" type=\"xml\">\r\n                <xpath expr=\"//page[@name='company_details']/group[1]\" position=\"before\">\r\n                    <group name=\"sf_buyer_notes_c_field\" col=\"2\">\r\n                        <field name=\"sf_buyer_notes_c\" string=\"Buyer's Notes\"/>\r\n                    </group>\r\n                </xpath>\r\n            </field>\r\n        </record>\r\n    </data>\r\n</odoo>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../salesforce_connector/views/crm_lead_view.xml b/../salesforce_connector/views/crm_lead_view.xml
--- a/../salesforce_connector/views/crm_lead_view.xml	(revision 1d212c13d7678383144751f05cf4ef0c2c556b0b)
+++ b/../salesforce_connector/views/crm_lead_view.xml	(date 1632729825466)
@@ -11,10 +11,10 @@
                 </xpath>
                 <page name="extra" position="after">
                     <page name="salesforce" string="SalesForce Details"
-                          attrs="{'invisible': ['|',('sf_id', '=', False),('type','=','opportunity')]}">
+                          attrs="{'invisible': [('type','=','opportunity')]}"> <!--'|',('sf_id', '=', False),-->
                         <group>
                             <group>
-                                <field name="sf_id" string="Sf Lead Id"/>
+                                <!-- <field name="sf_id" string="Sf Lead Id"/> -->
                             </group>
                             <group>
                                 <field name="sf_name"/>
@@ -80,10 +80,10 @@
             <field name="inherit_id" ref="sale_crm.crm_case_form_view_oppor"/>
             <field name="arch" type="xml">
                 <page name="lead" position="after">
-                    <page name="salesforce" string="SalesForce Details" attrs="{'invisible': ['|',('sf_id', '=', False),('type','=','lead')]}">
+                    <page name="salesforce" string="SalesForce Details" attrs="{'invisible': [('type','=','lead')]}"> <!--'|',('sf_id', '=', False),-->
                         <group>
                             <group>
-                                <field name="sf_id"/>
+                                <!-- <field name="sf_id"/> -->
                             </group>
                             <group>
                                 <field name="sf_name"/>
Index: ../salesforce_connector/models/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># -*- coding: utf-8 -*-\r\n\r\nfrom odoo import models, fields, api\r\nfrom datetime import datetime, timedelta\r\n\r\n# class CustomPartner(models.Model):\r\n#     \"\"\"\r\n#     Add fields in res.partner\r\n#\r\n#     \"\"\"\r\n#     _inherit = \"res.partner\"\r\n#\r\n#     # Contact\r\n#     sf_design = fields.Char('Design')\r\n#     sf_contact_id = fields.Char(string=\"SalesForce Contact Id\", readonly=True, index=True)\r\n#     sf_related_account_id = fields.Many2one('res.partner', string=\"Account ID\", readonly=True)\r\n#     sf_asst_name = fields.Char(string=\"AssistantName\", readonly=True)\r\n#     sf_asst_phone = fields.Char(string='Assistant Phone', readonly=True)\r\n#     sf_birth_date = fields.Date(string='Birth Date', readonly=True)\r\n#     sf_department = fields.Char(string=\"Sf Department\", readonly=True)\r\n#     sf_email_bounce_date = fields.Datetime(string='Email Bounced Date', readonly=True)\r\n#     sf_email_bounce_rsn = fields.Char(string=\"Email Bounced Reason\", readonly=True)\r\n#     sf_first_name = fields.Char(string=\"First Name\", readonly=True)\r\n#     sf_is_mail_bounced = fields.Boolean(string=\"Is Email Bounced\", readonly=True)\r\n#     sf_jigsaw_contact_id = fields.Char(string=\"Jigsaw Contact Id\", readonly=True)\r\n#     sf_last_name = fields.Char(string=\"Last Name\", readonly=True)\r\n#     sf_lst_ref_data = fields.Datetime(string='Last Reference Date', readonly=True)\r\n#     sf_lead_source = fields.Selection([('Partner Referral', 'Partner Referral'), ('Web', 'Web'),\r\n#                                        ('Phone Inquiry', 'Phone Inquiry'), ('Other', 'Other'),\r\n#                                        ('Purchased List', 'Purchased List'), ('Trade Show', 'Trade Show'),\r\n#                                        ('External Referral','External Referral'), ('Word of mouth','Word of mouth'),\r\n#                                        ('Public Relations','Public Relations'), ('Partner','Partner'),\r\n#                                        ('Thomas Net','ThomasNet'), ('Greg Papandrew','Greg Papandrew'),\r\n#                                        ('Global Spec','Global Spec'), ('3D Instruments, LLC','3D Instruments, LLC'),\r\n#                                        ('4DSP, LLC','4DSP, LLC')], string=\"Lead Source\", readonly=True)\r\n#     sf_mailing_city = fields.Char(string=\"Mailing City\", readonly=True)\r\n#     sf_mailing_country = fields.Char(string=\"Mailing Country\", readonly=True)\r\n#     sf_mailing_geocode_accuracy = fields.Selection([('Address', 'Address'), ('NearAddress', 'NearAddress'),\r\n#                                                     ('Block', 'Block'), ('Street', 'Street'), ('Zip', 'Zip'),\r\n#                                                     ('ExtendedZip', 'ExtendedZip'), ('Neighborhood', 'Neighborhood'),\r\n#                                                     ('City', 'City'), ('Country', 'Country'), ('State', 'State'),\r\n#                                                     ('Unknown', 'Unknown')], string=\"Mailing Geocode Accuracy\",\r\n#                                                    readonly=True)\r\n#     sf_mailing_latitude = fields.Float(string=\"Mailing Latitude\", readonly=True)\r\n#     sf_mailing_longitude = fields.Float(string=\"Mailing Longitude\", readonly=True)\r\n#     sf_mailing_postalcode = fields.Char(string=\"Mailing PostalCode\", readonly=True)\r\n#     sf_mailing_state = fields.Char(string=\"Mailing State\", readonly=True)\r\n#     sf_mailing_street = fields.Char(string=\"Mailing Street\", readonly=True)\r\n#     sf_reports_to = fields.Many2one('res.partner', string=\"Reports To Id\", readonly=True)\r\n#     sf_other_city = fields.Char(string=\"Other City\", readonly=True)\r\n#     sf_other_country = fields.Char(string=\"Other Country\", readonly=True)\r\n#     sf_other_geocode_accuracy = fields.Selection([('Address', 'Address'), ('NearAddress', 'NearAddress'),\r\n#                                                     ('Block', 'Block'), ('Street', 'Street'), ('Zip', 'Zip'),\r\n#                                                     ('ExtendedZip', 'ExtendedZip'), ('Neighborhood', 'Neighborhood'),\r\n#                                                     ('City', 'City'), ('Country', 'Country'), ('State', 'State'),\r\n#                                                     ('Unknown', 'Unknown')], string=\"Other Geocode Accuracy\",\r\n#                                                    readonly=True)\r\n#     sf_other_latitude = fields.Float(string=\"Other Latitude\", readonly=True)\r\n#     sf_other_longitude = fields.Float(string=\"Other Longitude\", readonly=True)\r\n#     sf_other_postalcode = fields.Char(string=\"Other PostalCode\", readonly=True)\r\n#     sf_other_state = fields.Char(string=\"Other State\", readonly=True)\r\n#     sf_other_street = fields.Char(string=\"Other Street\", readonly=True)\r\n#     sf_salutation = fields.Selection([('Mr.', 'Mr.'), ('Ms.', 'Ms.'), ('Mrs.', 'Mrs.'), ('Dr.', 'Dr.'),\r\n#                                       ('Prof.', 'Prof.')], string=\"Salutation\")\r\n#     sf_title = fields.Char(string=\"Salesforce Title\", readonly=True)\r\n#\r\n#     sf_country_name = fields.Char(string='Sf Country name')\r\n#     sf_country_id = fields.Many2one('sf.country.map',string='Country id')\r\n#     sf_state = fields.Char(string='Salesforce State name')\r\n#     sf_state_id = fields.Many2one('sf.state.map',string='State id')\r\n#     # Account\r\n#     sf_account_id = fields.Char(string=\"SalesForce Account Id\", readonly=True, index=True)\r\n#     sf_company_number_of_employees = fields.Char('No of employees')\r\n#     sf_individual_rel_id = fields.Many2one('res.partner', string=\"Individual Id\", readonly=True)\r\n#     sf_customer_name = fields.Char(string=\"Customer Name\", readonly=True)\r\n#     sf_account_source = fields.Selection([('YES', 'YES'), ('NO', 'NO'), ('MAYBE', 'MAYBE'), ('External Referral', 'External Referral'), ('Partner', 'Partner'),\r\n#                                           ('Greg Papandrew', 'Greg Papandrew'), ('Trade Show', 'Trade Show'),\r\n#                                           ('Web', 'Web'), ('Word of mouth', 'Word of mouth'), ('Other', 'Other'),\r\n#                                           ('Thomas Net', 'Thomas Net'), ('Global Spec', 'Global Spec')],\r\n#                                          string=\"Account Source\", readonly=True)\r\n#     sf_annualrevenue = fields.Float(string=\"Sf Annual Revenue\", readonly=True)\r\n#     assembly_account_status = fields.Selection(selection_add=[('COLD', 'COLD'), ('HOT', 'HOT'),\r\n#                                                               ('WARM', 'WARM'),\r\n#                                                               ('BC LIST', 'BC LIST'),\r\n#                                                               ('CLOSED', 'CLOSED'), ('WRONG #', 'WRONG #')])\r\n#     sf_assembly_first_order__c = fields.Date(string='Assembly_First_Order__c', readonly=True)\r\n#     sf_billing_city = fields.Char(string=\"Billing City\", readonly=True)\r\n#     sf_billing_country = fields.Char(string=\"Billing Country\", readonly=True)\r\n#     sf_billing_geocode_accuracy = fields.Selection([('Address', 'Address'), ('NearAddress', 'NearAddress'),\r\n#                                                    ('Block', 'Block'), ('Street', 'Street'), ('Zip', 'Zip'),\r\n#                                                    ('ExtendedZip', 'ExtendedZip'), ('Neighborhood', 'Neighborhood'),\r\n#                                                    ('City', 'City'), ('Country', 'Country'), ('State', 'State'),\r\n#                                                    ('Unknown', 'Unknown')], string=\"Billing Geocode Accuracy\",\r\n#                                                    readonly=True)\r\n#     sf_billing_latitude = fields.Float(string=\"Billing Latitude\", readonly=True)\r\n#     sf_billing_longitude = fields.Float(string=\"Billing Longitude\", readonly=True)\r\n#     sf_billing_postalcode = fields.Char(string=\"Billing PostalCode\", readonly=True)\r\n#     sf_billing_state = fields.Char(string=\"Billing State\", readonly=True)\r\n#     sf_billing_street = fields.Char(string=\"Billing Street\", readonly=True)\r\n#     sf_buyer_notes__c = fields.Text(string=\"Buyer_Notes__c\", readonly=True)\r\n#     sf_comments_2__c = fields.Text(string=\"Comments_2__c\", readonly=True)\r\n#     sf_comments__c = fields.Text(string=\"Comments__c\", readonly=True)\r\n#     # company_business_type = fields.Selection(selection_add=[(\"Don\\'t Know\", \"Don\\'t Know\")])\r\n#     # sf_classification__c = fields.Selection([('Guppy', 'Guppy'), ('Minnow', 'Minnow'), ('Tuna', 'Tuna'),\r\n#     #                                          ('Whale', 'Whale')], string=\"Classification__c\", readonly=True)\r\n#     # sf_company_type__c = fields.Selection([('CM', 'CM'), ('OEM', 'OEM'), ('Design', 'Design'), ('Other', 'Other'),\r\n#     #                                        (\"Don't Know\", \"Don't Know\")], string=\"Company_Type__c\", readonly=True)\r\n#     sf_connection_rcv_id = fields.Many2one('sf.pnc', string=\"Connection Received Id\", readonly=True)\r\n#     sf_connection_snt_id = fields.Many2one('sf.pnc', string=\"Connection Sent Id\", readonly=True)\r\n#     sf_credit_ref__c = fields.Text(string=\"Credit_Reference__c\", readonly=True)\r\n#     sf_description = fields.Text(string=\"Description\", readonly=True)\r\n#     sf_estimated_pcb_expense__c = fields.Float(string=\"Estimated_PCB_Expense__c\", readonly=True)\r\n#     sf_expected_annual_spend__c = fields.Float(string=\"Expected_Annual_Spend__c\", readonly=True)\r\n#     sf_interested_in_assembly__c = fields.Boolean(string=\"Interested_in_Assembly__c\", readonly=True)\r\n#     sf_is_deleted = fields.Boolean(string=\"Is Deleted\", readonly=True)\r\n#     sf_jigsaw_com_id = fields.Char(string=\"Jigsaw Company Id\", readonly=True)\r\n#     sf_lead_status__c = fields.Selection([('CUSTOMER', 'CUSTOMER'), ('COLD', 'COLD'), ('CLOSED', 'CLOSED'),\r\n#                                           ('BC LIST', 'BC LIST'), ('HOT', 'HOT'), ('WARM', 'WARM'), ('NF', 'NF'),\r\n#                                           ('NI', 'NI'), ('WRONG #', 'WRONG #')], string=\"Lead_Status__c\", readonly=True)\r\n#     sf_master_rec_id = fields.Many2one('res.partner', string=\"Master Record Id\", readonly=True)\r\n#     sf_partner_id = fields.Many2one('res.partner', string=\"Partner Id\", readonly=True)\r\n#     sf_photo_url = fields.Char('Photo Url', readonly=True)\r\n#     sf_prospecting__c = fields.Boolean(string=\"Prospecting__c\", readonly=True)\r\n#     sf_rep_name__c = fields.Many2one('sf.rep__c', string=\"Rep_Name__c\", readonly=True)\r\n#     sf_shipping_city = fields.Char(string=\"Shipping City\", readonly=True)\r\n#     sf_shipping_country = fields.Char(string=\"Shipping Country\", readonly=True)\r\n#     sf_shipping_geocode_accuracy = fields.Selection([('Address', 'Address'), ('NearAddress', 'NearAddress'),\r\n#                                                     ('Block', 'Block'), ('Street', 'Street'), ('Zip', 'Zip'),\r\n#                                                     ('ExtendedZip', 'ExtendedZip'), ('Neighborhood', 'Neighborhood'),\r\n#                                                     ('City', 'City'), ('Country', 'Country'), ('State', 'State'),\r\n#                                                     ('Unknown', 'Unknown')], string=\"Shipping Geocode Accuracy\",\r\n#                                                     readonly=True)\r\n#     sf_shipping_latitude = fields.Float(string=\"Shipping Latitude\", readonly=True)\r\n#     sf_shipping_longitude = fields.Float(string=\"Shipping Longitude\", readonly=True)\r\n#     sf_shipping_postalcode = fields.Char(string=\"Shipping PostalCode\", readonly=True)\r\n#     sf_shipping_state = fields.Char(string=\"Shipping State\", readonly=True)\r\n#     sf_shipping_street = fields.Char(string=\"Shipping Street\", readonly=True)\r\n#     sf_sp_acc_status__c = fields.Selection([('GET INFO', 'GET INFO'), ('CUSTOMER', 'CUSTOMER'), ('NF', 'NF'),\r\n#                                             ('NI', 'NI'), ('QUOTED', 'QUOTED')], string=\"Solder Paste Account Status\",\r\n#                                            readonly=True)\r\n#     sf_sp_notes__c = fields.Text(string='Solder Paste Notes c', readonly=True)\r\n#     sf_stencil_notes__c = fields.Text(string='Stencil Notes', readonly=True)\r\n#     sf_type = fields.Selection([('Customer - Direct', 'Customer - Direct'), ('Customer - Channel', 'Customer - Channel'),\r\n#                                 ('Prospect','Prospect'),('Channel Partner / Reseller','Channel Partner / Reseller'),\r\n#                                 ('Installation Partner','Installation Partner'),\r\n#                                 ('Technology Partner','Technology Partner'),\r\n#                                 ('Other','Other'),('Customer','Customer'),('Not Interested','Not Interested'),\r\n#                                 ('Not a Fit','Not a Fit'),('Lead','Lead'),\r\n#                                 ('Out of Business','Out of Business'),('Inactive','Inactive'),('Partner','Partner'),\r\n#                                 ('Competitor','Competitor'),('Not Interested','Not Interested')],\r\n#                                readonly=True)\r\n#     sf_velegrity__c = fields.Text(string='Velegrity__c', readonly=True)\r\n#     stencil_account_status = fields.Selection(selection_add=[('No', 'No')])\r\n#     sf_source__c = fields.Selection([('IPC', 'IPC'), ('Referral', 'Referral'), ('Web Search', 'Web Search'),\r\n#                                      ('Burhan', 'Burhan'), ('SMTA', 'SMTA')], string=\"Source\", readonly=True)\r\n#     # sf_square_footage__c = fields.Float(string=\"Square_Footage__c\", readonly=True)\r\n#     # sf_no_of_employees__c = fields.Float(string=\"Number_of_Employees__c\", readonly=True)\r\n#\r\n#     # Individual\r\n#     sf_individual_id = fields.Char(string=\"SalesForce Individual Id\", readonly=True)\r\n#     sf_can_store_pii_elsewhere = fields.Boolean(string=\"Can Store Pii Else where\", readonly=True)\r\n#     sf_children_count = fields.Integer(string=\"Children Count\", readonly=True)\r\n#     sf_consume_credit_score = fields.Integer(string=\"Consume Credit Score\", readonly=True)\r\n#     sf_ccs_povider_name = fields.Char(string=\"Consumer Credit Score Provider Name\", readonly=True)\r\n#     sf_convictions_count = fields.Integer(string=\"Convictions Count\", readonly=True)\r\n#     sf_death_date = fields.Date(string='Death Date', readonly=True)\r\n#     sf_hasoptedoutgeo_track = fields.Boolean(string=\"HasOptedOutGeoTracking\", readonly=True)\r\n#     sf_hasoptedout_processing = fields.Boolean(string=\"HasOptedOutProcessing\", readonly=True)\r\n#     sf_hasoptedout_profiling = fields.Boolean(string=\"HasOptedOutProfiling\", readonly=True)\r\n#     sf_hasoptedout_solicit = fields.Boolean(string=\"HasOptedOutSolicit\", readonly=True)\r\n#     sf_hasoptedout_trac = fields.Boolean(string=\"HasOptedOutTracking\", readonly=True)\r\n#     sf_individual_age = fields.Selection([('13 or Older', '13 or Older'), ('16 or Older', '16 or Older')],\r\n#                                          string=\"Individuals Age\", readonly=True)\r\n#     sf_influencer_rating = fields.Integer(string=\"InfluencerRating\", readonly=True)\r\n#     sf_is_home_own = fields.Boolean(string=\"IsHomeOwner\", readonly=True)\r\n#     sf_military_service = fields.Selection([('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')],\r\n#                                          string=\"MilitaryService\", readonly=True)\r\n#     sf_occupation = fields.Char(string=\"Occupation\", readonly=True)\r\n#     sf_sendindividualdata = fields.Boolean(string=\"SendIndividualData\", readonly=True)\r\n#     sf_should_forget = fields.Boolean(string=\"ShouldForget\", readonly=True)\r\n#     sf_created_date = fields.Datetime(string=\"Partner Created Date\")\r\n#     sf_last_modified_date = fields.Datetime(string=\"Partner Last Modified Date\")\r\n#     # user fields\r\n#     sf_salesperson_id = fields.Char('Salesforce Salesperson Id', readonly=True)\r\n#     sf_created_by_id = fields.Char('Sf CreatedBy Id')\r\n#     sf_last_modified_by_id = fields.Char('Sf LastModifiedBy Id')\r\n\r\n# class CustomLead(models.Model):\r\n#     \"\"\"\r\n#     Adds custom fields in crm.lead model\r\n#     \"\"\"\r\n#     _inherit = \"crm.lead\"\r\n#\r\n#     sf_name = fields.Char(string=\"Sales Force Name\")\r\n#     sf_id = fields.Char(string=\"SalesForce Opportunity Id\", index=True)\r\n#     sf_amount = fields.Float(string=\"Amount\")\r\n#     sf_connection_rcv_id = fields.Many2one('sf.pnc', string=\"Connection Received Id\", readonly=True)\r\n#     sf_connection_snt_id = fields.Many2one('sf.pnc', string=\"Connection Sent Id\", readonly=True)\r\n#     sf_contact_id = fields.Many2one('res.partner', string=\"Conatct Id\", readonly=True)\r\n#     sf_fiscal = fields.Char(string=\"Fiscal\")\r\n#     sf_fiscal_quarter = fields.Integer(string=\"Fiscal Quarter\")\r\n#     sf_fiscal_year = fields.Integer(string=\"Fiscal Year\")\r\n#     sf_stage_name = fields.Char(string='Sf stage name')\r\n#     sf_forecast_category = fields.Selection([('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'),\r\n#                                              ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')],\r\n#                                             string=\"ForecastCategory\")\r\n#     # sf_forecast_cat_name = fields.Selection([('Omitted', 'Omitted'), ('Pipeline', 'Pipeline'),\r\n#     # ('Best Case', 'Best Case'), ('Commit', 'Commit'), ('Closed', 'Closed')],string=\"ForecastCategoryname\")\r\n#\r\n#     sf_has_opn_activity = fields.Boolean(string=\"HasOpenActivity\")\r\n#     sf_has_opp_lineitem = fields.Boolean(string=\"HasOpportunityLineItem\")\r\n#     sf_has_overduetask = fields.Boolean(string=\"HasOverdueTask\")\r\n#     sf_is_closed = fields.Boolean(string=\"IsClosed\")\r\n#     sf_is_deleted = fields.Boolean(string=\"IsDeleted\")\r\n#     sf_is_won = fields.Boolean(string=\"IsWon\")\r\n#     sf_stencil_amount = fields.Float(string=\"Stencil_Amount__c\")\r\n#     sf_tariff_amount = fields.Float(string=\"Tariff_Amount__c\")\r\n#     sf_stencil__c = fields.Selection([('CHECKING', 'CHECKING'), ('ORDERED', 'ORDERED'), ('NOT NEEDED', 'NOT NEEDED'),\r\n#                                       (\"DOESN'T BUY\", \"DOESN'T BUY\")], string=\"Stencil__c\")\r\n#     # sf_quote_type__c = fields.Selection([('Bid for Bid', 'Bid for Bid'), ('Bid for Buy', 'Bid for Buy'),\r\n#     # (\"Unknown\", \"Unknown\")], string=\"Quote_Type__c\")\r\n#     sf_potential_customer = fields.Boolean(string=\"Potential_Customer__c\")\r\n#     sf_pcb_amount = fields.Float(string=\"PCB_Amount__c\")\r\n#     sf_open_date = fields.Date(string=\"Open Date\")\r\n#     sf_closed_date = fields.Date(string=\"Opportunity Closed Date\")\r\n#     sf_feed_back = fields.Text('Feedback')\r\n#     sf_expected_order_val = fields.Float(string=\"Expected_Order_Value__c\")\r\n#     sf_company_type = fields.Selection([('OEM', 'OEM'), ('CM', 'CM'), ('Design', 'Design'), ('Other','Other'),\r\n#                                         (\"Don't Know\", \"Don't Know\")], string=\"Company_Type__c\")\r\n#     sf_comment = fields.Text('Comments__c')\r\n#     sf_buyer_feedback = fields.Char(string=\"Buyer_Feedback__c\")\r\n#     sf_blanket_order = fields.Boolean(string=\"Blanket_Order__c\")\r\n#     sf_assembly = fields.Boolean(string=\"Assembly__c\")\r\n#     sf_assembly_amount = fields.Float(string=\"Assembly_Amount__c\")\r\n#     sf_created_date = fields.Datetime(string=\"Opportunity Created Date\")\r\n#     sf_last_modified_date = fields.Datetime(string=\"Opportunity Last Modified Date\")\r\n#     # RVQ type for Quote_Type__c\r\n#     RFQ_type = fields.Many2one('sf.quote.type.map', string='RFQ Type')\r\n#\r\n#     # Lead\r\n#     sf_salesperson_id = fields.Char('Salesforce OwnerId', readonly=True)\r\n#     sf_created_by_id = fields.Char('Sf CreatedById')\r\n#     sf_last_modified_by_id = fields.Char('Sf LastModifiedById')\r\n#     sf_comment_2__c = fields.Text('Comments_2_c')\r\n#     sf_master_rec_id = fields.Many2one('res.partner', string=\"Master Record Id\", readonly=True)\r\n#     sf_individual_rel_id = fields.Many2one('res.partner', string=\"Individual Id\", readonly=True)\r\n#     sf_address = fields.Text('Sf Address')\r\n#     # sf_company = fields.Char('Sf Company')\r\n#     sf_country = fields.Char('Sf Country')\r\n#     sf_email = fields.Char('Sf Email')\r\n#     sf_is_converted = fields.Boolean('Sf Is Converted')\r\n#     sf_lead_source = fields.Selection([('Partner Referral', 'Partner Referral'), ('Web', 'Web'),\r\n#                                        ('Phone Inquiry', 'Phone Inquiry'), ('Other', 'Other'),\r\n#                                        ('Purchased List', 'Purchased List'), ('Trade Show', 'Trade Show'),\r\n#                                        ('External Referral','External Referral'), ('Word of mouth','Word of mouth'),\r\n#                                        ('Public Relations','Public Relations'), ('Partner','Partner'),\r\n#                                        ('Thomas Net','ThomasNet'), ('Greg Papandrew','Greg Papandrew'),\r\n#                                        ('Global Spec','Global Spec'), ('3D Instruments, LLC','3D Instruments, LLC'),\r\n#                                        ('4DSP, LLC','4DSP, LLC')], string=\"Lead Source\", readonly=True)\r\n#     sf_description = fields.Text(string=\"Description\")\r\n#     sf_lead_status = fields.Selection([('CUSTOMER', 'CUSTOMER'), ('COLD', 'COLD'), ('CLOSED', 'CLOSED'),\r\n#                                        ('BC LIST', 'BC LIST'), ('HOT', 'HOT'), ('WARM', 'WARM'), ('NF', 'NF'),\r\n#                                        ('NI', 'NI'), ('WRONG #', 'WRONG #'), ('OPEN','OPEN'), ('Mailing', 'Mailing'),\r\n#                                        (\"Don't Buy PCB's\", \"Don't Buy PCB's\")]\r\n#                                       , string=\"Lead_Status\")\r\n#     sf_interested_in_assembly__c = fields.Selection([('YES', 'YES'), ('NO', 'NO'), ('MAYBE', 'MAYBE'),\r\n#                                                      ], string=\"Sf Interested in Assembly\")\r\n#     sf_lead_stencil__c = fields.Selection([(\"Don't Know\", \"Don't Know\"), ('Yes', 'Yes'), ('No', 'No')],\r\n#                                           string=\"Lead Stencil__c\")\r\n#     sf_lead_stencil_notes__c = fields.Text(string='Stencil Notes')\r\n#     sf_EmailBouncedDate = fields.Datetime(string='Email Bounced Date')\r\n#     sf_EmailBouncedReason = fields.Text(string='Email Bounced Reason')\r\n#     sf_lead_expected_annual_spend__c = fields.Float(string=\"Expected_Annual_Spend__c\", readonly=True)\r\n#     sf_title = fields.Char(string=\"Salutation\")\r\n#\r\n#     # company_business_type = fields.Selection(selection_add=[(\"Don\\'t Know\", \"Don\\'t Know\")])\r\n#     sf_state = fields.Char('Sf State')\r\n#     sf_street = fields.Char('Sf Street')\r\n#     sf_postal_code = fields.Char('Postal Code')\r\n#     sales_import_status = fields.Selection([('imported', 'Imported'), ('not_imported', 'Not Imported Yet'),\r\n#                                             ('failed_import', 'Import Failed'), ('re_import', 'Re Importing')],\r\n#                                            string='Import Status', default='not_imported')\r\n#\r\n#     sf_buyer_notes_c = fields.Text('Buyer_Notes__c')\r\n\r\n\r\nclass SalesforceUserId(models.Model):\r\n    _inherit = 'res.users'\r\n    salesforce_user_id = fields.Char('Salesforce User Id')\r\n\r\nclass SalesforceTasks(models.Model):\r\n    _name = 'salesforce.tasks'\r\n    _description = 'Model for storing salesforce tasks fields'\r\n    _rec_name = 'Subject'\r\n\r\n    sf_id = fields.Char(string=\"SalesForce Task Id\", index=True)\r\n\r\n    active = fields.Boolean(default=True)\r\n    sf_salesperson_id = fields.Char('Assigned To')\r\n\r\n    user_id = fields.Many2one('res.users')\r\n    CallDurationInSeconds = fields.Integer('Call Duration')\r\n    CallObject = fields.Char('Call Object Identifier')\r\n    CallDisposition = fields.Char('Call Result')\r\n    CallType = fields.Char('Call Type')\r\n    Description = fields.Text('Comments')\r\n    sf_created_by_id = fields.Char('Salesforce Created By')\r\n    sf_last_modified_by_id = fields.Char('Salesforce LastModified By')\r\n    IsRecurrence = fields.Boolean('Create Recurring Series of Tasks')\r\n    ActivityDate = fields.Date('Activity due date')\r\n    CompletedDateTime = fields.Datetime('Task Complete date time')\r\n    Email = fields.Char('Email')\r\n    Name = fields.Char('Who (Lead or contact)')\r\n    who_Type = fields.Selection([('Lead', 'Lead'), ('Contact', 'Contact')], string='Who Type')\r\n    Phone = fields.Char('Phone')\r\n    Priority = fields.Char('Priority')\r\n    RecurrenceInterval = fields.Integer('Recurrence Interval')\r\n    What = fields.Char('Related to ID')\r\n    what_Type = fields.Char('Related to')\r\n    IsReminderSet = fields.Boolean('Is reminder set')\r\n    RecurrenceRegeneratedType = fields.Char('Repeat This Task')\r\n    Status = fields.Char('status')\r\n    Subject = fields.Char('Subject')\r\n    TaskSubtype = fields.Char('task subtype')\r\n    Type = fields.Many2one('salesforce.task.types',string='Task Type')\r\n\r\n    sf_created_date = fields.Datetime('Task Create time')\r\n\r\n    # task to activity status\r\n    is_converted = fields.Boolean('Is task Converted', default=False)\r\n    activity_message_id = fields.Many2one('mail.message', ondelete='set null')\r\n    activity_id = fields.Many2one('mail.activity', ondelete='set null')\r\n    conversion_status = fields.Char('Conversion Status')\r\n\r\n    related_opportunity = fields.Many2one('crm.lead', string='Related Opportunity Record',\r\n                                          compute='compute_related_opportunity', default=False)\r\n    related_account = fields.Many2one('res.partner', string='Related Account Record',\r\n                                          compute='compute_related_account', default=False)\r\n\r\n    def compute_related_opportunity(self):\r\n        for rec in self:\r\n            if not rec.What:\r\n                rec.related_opportunity = False\r\n                continue\r\n            related_rec = self.env['crm.lead'].search([('sf_id','=',rec.What),('type','=','opportunity')], limit=1)\r\n            if related_rec:\r\n                rec.related_opportunity = related_rec.id\r\n            else:\r\n                rec.related_opportunity = False\r\n\r\n    def compute_related_account(self):\r\n        for rec in self:\r\n            if not rec.What:\r\n                rec.related_account = False\r\n                continue\r\n            related_rec = self.env['res.partner'].search([('sf_account_id','=',rec.What)], limit=1)\r\n            if related_rec:\r\n                rec.related_account = related_rec.id\r\n            else:\r\n                rec.related_account = False\r\n\r\n    def convert_tasks_on_form_action(self):\r\n        cron_record = self.env.ref('salesforce_connector.sf_tasks_conversion_process_1')\r\n        if cron_record and self.ids:\r\n            next_exc_time = datetime.now() + timedelta(milliseconds=5)\r\n            cron_record.write({'nextcall': next_exc_time})\r\n            code_to_run = f\"model.convert_salesforce_tasks_to_activities(records={[self.ids]})\"\r\n            cron_record.write({'code': code_to_run})\r\n\r\n        # self.env['sf.sync.data'].convert_salesforce_tasks_to_activities(self.ids)\r\n\r\nclass SalesforceTaskTypes(models.Model):\r\n    _name = 'salesforce.task.types'\r\n    _description = 'Salesforce Task types'\r\n    name = fields.Char('Task Type Name')\r\n\r\nclass MailActivityForSalesforce(models.Model):\r\n    _inherit = 'mail.activity'\r\n\r\n    salesforce_id = fields.Char('Salesforce ID')\r\n    imported_task_id = fields.Many2one('salesforce.tasks',string='Imported Salesforce Task', ondelete='set null')\r\n    call_direction = fields.Selection([('inbound','inbound'),('outbound','outbound'),('transfer','transfer')],\r\n                                      string='Call Direction')\r\n    call_result = fields.Selection([('Gatekeeper','Gatekeeper'),('Reached Buyer','Reached Buyer'),\r\n                                    ('Reached Decision Maker','Reached Decision Maker'),\r\n                                    ('DNC','DNC'),('Wrong Number','Wrong Number')], string='Call Result')\r\n    call_disposition = fields.Selection([('Answered','Answered'),('No Answer','No Answer'),('Left VM','Left VM'),\r\n                                         ('Busy','Busy'),('Inactive/Disconnected Number','Inactive/Disconnected Number')],\r\n                                      string='Call Disposition')\r\n    is_activity_call_type = fields.Boolean('Call Type Activity',compute='compute_if_call_type_activity',\r\n                                           default=False, store=True)\r\n    activity_reason = fields.Selection([('Customer Onboarding - NDA','Customer Onboarding - NDA'),\r\n                                        ('Customer Onboarding - Terms and Conditions', 'Customer Onboarding - Terms and Conditions'),\r\n                                        ('Customer Onboarding - New Customer Info Sheet', 'Customer Onboarding - New Customer Info Sheet'),\r\n                                        ('Customer Loyalty Program','Customer Loyalty Program'),\r\n                                        ('Accounting','Accounting'),('Quality','Quality'),\r\n                                        ('Quote - Follow-up','Quote - Follow-up'),\r\n                                        ('Quote - Delivery','Quote - Delivery'),\r\n                                        ('RFQ','RFQ'),('PO','PO'),('Shipping / Receiving','Shipping / Receiving'),\r\n                                        ('Account Management','Account Management'),('Growth','Growth'),\r\n                                        ('Engineering','Manufacturing')], string='Reason')\r\n\r\n    @api.depends('activity_type_id')\r\n    def compute_if_call_type_activity(self):\r\n        for rec in self:\r\n            if rec.activity_type_id.id == self.env.ref('mail.mail_activity_data_call').id:\r\n                rec.is_activity_call_type = True\r\n            else:\r\n                rec.is_activity_call_type = False\r\n\r\nclass MailMessageForSalesforce(models.Model):\r\n    _inherit = 'mail.message'\r\n\r\n    imported_task_id = fields.Many2one('salesforce.tasks', string='Imported Salesforce Task ID', ondelete='set null')\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../salesforce_connector/models/models.py b/../salesforce_connector/models/models.py
--- a/../salesforce_connector/models/models.py	(revision 1d212c13d7678383144751f05cf4ef0c2c556b0b)
+++ b/../salesforce_connector/models/models.py	(date 1632729825462)
@@ -342,7 +342,7 @@
             if not rec.What:
                 rec.related_opportunity = False
                 continue
-            related_rec = self.env['crm.lead'].search([('sf_id','=',rec.What),('type','=','opportunity')], limit=1)
+            related_rec = self.env['crm.lead'].search([('type','=','opportunity')], limit=1)
             if related_rec:
                 rec.related_opportunity = related_rec.id
             else:
Index: ../salesforce_connector/views/synced_records_view.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<odoo>\r\n    <data>\r\n        <record id=\"action_sf_account\" model=\"ir.actions.act_window\">\r\n            <field name=\"name\">Accounts</field>\r\n            <field name=\"res_model\">res.partner</field>\r\n            <field name=\"view_mode\">tree,form</field>\r\n            <field name=\"domain\">[('sf_account_id','!=',False)]</field>\r\n        </record>\r\n\r\n        <record id=\"action_sf_contact\" model=\"ir.actions.act_window\">\r\n            <field name=\"name\">Contacts</field>\r\n            <field name=\"res_model\">res.partner</field>\r\n            <field name=\"view_mode\">tree,form</field>\r\n            <field name=\"domain\">[('sf_contact_id','!=',False)]</field>\r\n        </record>\r\n\r\n        <record id=\"action_sf_individual\" model=\"ir.actions.act_window\">\r\n            <field name=\"name\">Individuals</field>\r\n            <field name=\"res_model\">res.partner</field>\r\n            <field name=\"view_mode\">tree,form</field>\r\n            <field name=\"domain\">[('sf_individual_id','!=',False)]</field>\r\n        </record>\r\n\r\n        <record id=\"action_sf_rep_c\" model=\"ir.actions.act_window\">\r\n            <field name=\"name\">Rep__c</field>\r\n            <field name=\"res_model\">sf.rep__c</field>\r\n            <field name=\"view_mode\">tree,form</field>\r\n            <field name=\"domain\">[('sf_id','!=',False)]</field>\r\n        </record>\r\n\r\n        <record id=\"action_sf_opportunities\" model=\"ir.actions.act_window\">\r\n            <field name=\"name\">Oppourtunity</field>\r\n            <field name=\"res_model\">crm.lead</field>\r\n            <field name=\"view_mode\">kanban,tree,form</field>\r\n            <field name=\"domain\">['&amp;',('sf_id','!=',False),('type','=','opportunity')]</field>\r\n        </record>\r\n\r\n        <record id=\"action_sf_leads\" model=\"ir.actions.act_window\">\r\n            <field name=\"name\">Leads</field>\r\n            <field name=\"res_model\">crm.lead</field>\r\n            <field name=\"view_mode\">tree,form</field>\r\n            <field name=\"domain\">[('sf_id','!=',False),('type','=','lead')]</field>\r\n        </record>\r\n\r\n        <record id=\"action_sf_tasks\" model=\"ir.actions.act_window\">\r\n            <field name=\"name\">Salesforce Tasks</field>\r\n            <field name=\"res_model\">salesforce.tasks</field>\r\n            <field name=\"view_mode\">tree,form</field>\r\n            <field name=\"domain\">[('sf_id','!=',False)]</field>\r\n        </record>\r\n\r\n<!--        <record id=\"action_sf_pncs\" model=\"ir.actions.act_window\">-->\r\n<!--            <field name=\"name\">Partner Network Connection</field>-->\r\n<!--            <field name=\"res_model\">sf.pnc</field>-->\r\n<!--            <field name=\"view_mode\">tree,form</field>-->\r\n<!--            <field name=\"domain\">[('sf_id','!=',False)]</field>-->\r\n<!--        </record>-->\r\n\r\n\r\n\r\n        <menuitem id=\"sf_sync_records_menu\" name=\"Sync Records\"\r\n                  parent=\"main_salesforce_menu\" sequence=\"3\"/>\r\n\r\n        <menuitem id=\"sf_accounts_menu\" name=\"Accounts\" sequence=\"1\"\r\n                  parent=\"sf_sync_records_menu\" action=\"action_sf_account\"/>\r\n        <menuitem id=\"sf_contacts_menu\" name=\"Contacts\" sequence=\"2\"\r\n                  parent=\"sf_sync_records_menu\" action=\"action_sf_contact\"/>\r\n        <menuitem id=\"sf_individual_menu\" name=\"Individuals\" sequence=\"3\"\r\n                  parent=\"sf_sync_records_menu\" action=\"action_sf_individual\"/>\r\n        <menuitem id=\"sf_rep__c_menu\" name=\"Rep__c\" sequence=\"4\"\r\n                  parent=\"sf_sync_records_menu\" action=\"action_sf_rep_c\"/>\r\n        <menuitem id=\"sf_opportunity_menu\" name=\"Opportunities\" sequence=\"5\"\r\n                  parent=\"sf_sync_records_menu\" action=\"action_sf_opportunities\"/>\r\n        <menuitem id=\"sf_leads_menu\" name=\"Leads\" sequence=\"6\"\r\n                  parent=\"sf_sync_records_menu\" action=\"action_sf_leads\"/>\r\n\r\n        <menuitem id=\"sf_task_menu_item\" name=\"Task\" sequence=\"7\"\r\n                  parent=\"sf_sync_records_menu\" action=\"action_sf_tasks\"/>\r\n\r\n<!--        <menuitem id=\"sf_pnc_menu\" name=\"Partner Network Connection\" sequence=\"6\"-->\r\n<!--                  parent=\"sf_sync_records_menu\" action=\"action_sf_pncs\"/>-->\r\n    </data>\r\n</odoo>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../salesforce_connector/views/synced_records_view.xml b/../salesforce_connector/views/synced_records_view.xml
--- a/../salesforce_connector/views/synced_records_view.xml	(revision 1d212c13d7678383144751f05cf4ef0c2c556b0b)
+++ b/../salesforce_connector/views/synced_records_view.xml	(date 1632729825467)
@@ -33,14 +33,14 @@
             <field name="name">Oppourtunity</field>
             <field name="res_model">crm.lead</field>
             <field name="view_mode">kanban,tree,form</field>
-            <field name="domain">['&amp;',('sf_id','!=',False),('type','=','opportunity')]</field>
+            <field name="domain">[('type','=','opportunity')]</field> <!--'&amp;',('sf_id','!=',False),-->
         </record>
 
         <record id="action_sf_leads" model="ir.actions.act_window">
             <field name="name">Leads</field>
             <field name="res_model">crm.lead</field>
             <field name="view_mode">tree,form</field>
-            <field name="domain">[('sf_id','!=',False),('type','=','lead')]</field>
+            <field name="domain">[('type','=','lead')]</field> <!--('sf_id','!=',False),-->
         </record>
 
         <record id="action_sf_tasks" model="ir.actions.act_window">
Index: ../salesforce_connector/models/salesforce_queue_jobs.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nimport logging\r\nfrom odoo import models, fields,api, _\r\nfrom odoo.exceptions import Warning,ValidationError\r\nfrom dateutil.rrule import rrule, DAILY\r\nfrom dateutil.relativedelta import *\r\nfrom datetime import timedelta, datetime\r\nfrom base64 import encodebytes\r\nfrom collections import defaultdict\r\nimport re\r\n\r\n_logger = logging.getLogger(__name__)\r\n\r\nclass SfQueueManager(models.Model):\r\n    _name = 'sf.queue.jobs'\r\n    _description = 'This is used to Sync all the record in queues'\r\n    _rec_name = 'sf_model'\r\n    _order = 'id desc'\r\n\r\n    sf_model = fields.Selection([('Account', 'Account'), ('Contact', 'Contact'), ('Individual', 'Individual'),\r\n                                 ('PartnerNetworkConnection', 'PartnerNetworkConnection'), ('Rep__c', 'Rep__c'),\r\n                                 ('Pricebook2', 'Pricebook2'), ('Opportunity', 'Opportunity'),\r\n                                 ('Lead', 'Lead'), ('Task','Task')], string=\"Salesforce Model\")\r\n    odoo_model = fields.Many2one('ir.model', string=\"odoo Model\")\r\n    o_model = fields.Many2one('ir.model', string=\"o Model\")\r\n    from_date = fields.Datetime('From Date')\r\n    to_date = fields.Datetime('To Date')\r\n    # main_total_records = fields.Integer('Total Records per date', default=0)\r\n    # main_job = fields.Boolean('Is main job or child job', default=False)\r\n    record_count = fields.Integer('Total Records', default=0)\r\n    job_records = fields.Text(string='Salesforce Records')\r\n    processed_rec_count = fields.Integer('Processed Records', default=0)\r\n    state = fields.Selection([('new', 'New'), ('progress', 'In Progress'), ('done', 'Done'), ('failed', 'Failed')],\r\n                             string='State')\r\n    import_status = fields.Selection([('imported', 'Imported'), ('not_imported', 'Not Imported Yet'),\r\n                                      ('failed_import', 'Import Failed'), ('re_import', 'Re Importing')],\r\n                                     string='Import Status', default='not_imported')\r\n    include_custm = fields.Boolean('Include Custom Fields')\r\n    max_rec_per_job = fields.Integer('Maximum Record Per JOB')\r\n    sf_offset = fields.Integer('Offset value', default=0)\r\n    create_date = fields.Datetime('Created On', readonly=True, required=True, default=fields.Datetime.now)\r\n    all_sf_models = set()\r\n\r\n    def process_queue_jobs(self, for_new=False):\r\n        salesforce = self.env['salesforce.connector'].browse(1)\r\n        is_the_last_step = False\r\n        state = []\r\n        if for_new:\r\n            state = ['new', 'progress']\r\n        else:\r\n            state = ['failed', 'progress']\r\n\r\n        all_job = False\r\n        if not self.id:\r\n            all_job = True\r\n            # removed failed from the list ,if failed leave it as is don't process it unless stated manually\r\n            # state = ['new'] if for_new else ['new', 'progress']\r\n            self = self.search([('state', 'in', state)])\r\n\r\n        for record in self:\r\n            type(self).all_sf_models.add(record.sf_model)\r\n            record.state = 'progress'\r\n            _logger.info('New record in progress- id %s', record.id)\r\n            # record.env.cr.commit()\r\n            try:\r\n                total_records = salesforce.search_count(sf_model=record.sf_model, from_date=record.from_date, to_date=record.to_date)\r\n                # record.main_total_records = total_records\r\n                if total_records >= 2000:\r\n                    previous_time_segment_records = total_records\r\n                    hour_delta = 1\r\n                    # calculate total hours in between from_date and to_date time,convert seconds difference to hours\r\n                    total_hours_range = (record.to_date - record.from_date).seconds // 3600\r\n                    while total_records >= 2000:\r\n                        new_to_date = record.to_date - timedelta(hours=hour_delta)\r\n                        if new_to_date <= record.from_date:\r\n                            raise Exception('Time goes beyond down from from_date time')\r\n\r\n                        total_records = salesforce.search_count( sf_model=record.sf_model, from_date=record.from_date, to_date=new_to_date )\r\n                        if total_records < 2000:\r\n                            # change the current record to_date time and create a new record with from time\r\n                            old_to_date = record.to_date\r\n                            record.record_count = total_records\r\n                            record.state = 'new'\r\n                            record.to_date = new_to_date\r\n                            # record.env.cr.commit()\r\n\r\n                            # creating a new record with from_date = to_new_date\r\n                            new_job = record.copy()\r\n                            new_job.from_date = new_to_date\r\n                            new_job.to_date = old_to_date\r\n                            new_job.sf_offset = 0\r\n                            new_job.state = 'new'\r\n                            new_job.record_count = previous_time_segment_records - total_records\r\n                            # new_job.env.cr.commit()\r\n                            break\r\n\r\n                        if hour_delta >= (total_hours_range/2):\r\n                            hour_delta += 0.1\r\n                        elif hour_delta >= (total_hours_range / 4):\r\n                            hour_delta += 0.05\r\n                        elif hour_delta >= (total_hours_range / 5):\r\n                            hour_delta += 0.02\r\n                        else:\r\n                            hour_delta += 0.5\r\n                else:\r\n                    record.record_count = total_records\r\n                    _logger.info('Total records are %s ', total_records)\r\n                    # record.env.cr.commit()\r\n\r\n                # if record_count is zero then no need to use that record\r\n                if record.record_count == 0:\r\n                    # record.state = 'done'\r\n                    record.write({'state': 'done'})\r\n                    record.import_status = 'imported'\r\n                    record.env.cr.commit()\r\n                    # record.env.cr.commit()\r\n                    continue\r\n\r\n                records = salesforce._query_to_salesforce(model=record.odoo_model, sf_model=record.sf_model,\r\n                                                          from_date=record.from_date, to_date=record.to_date,\r\n                                                          include_custom=record.include_custm,\r\n                                                          offset=record.sf_offset, limit=record.max_rec_per_job)\r\n                record.record_count = len(records) if records else 0\r\n                # record.env.cr.commit()\r\n                if record.max_rec_per_job > 0 and record.record_count > 0 and record.record_count == record.max_rec_per_job:\r\n                    new_job = record.copy()\r\n                    new_job.sf_offset += record.max_rec_per_job\r\n                    new_job.state = 'new'\r\n                    new_job.record_count = 0\r\n                    # new_job.env.cr.commit()\r\n                if records:\r\n                    record.job_records = json.dumps(records)\r\n                    # self.update_salesforce_data(salesforce,record, record.sf_model, record.odoo_model, records)\r\n                # record.state = 'done'\r\n                record.write({'state': 'done'})\r\n                _logger.info('%s records are fetched ', record.record_count)\r\n            except Exception as e:\r\n                self.env.cr.rollback()\r\n                record.state = 'failed'\r\n                _logger.info('Commit to the DB,job failed')\r\n                self.env['salesforce.sync.history'].create_log_param(record.sf_model, '',\r\n                                                                     'failed', 'salesforce_to_odoo', e)\r\n\r\n            finally:\r\n                # for every record commit the changes,it affect only this record environment\r\n                # because it is a different thread\r\n                record.env.cr.commit()\r\n                _logger.info('Commit to the DB')\r\n\r\n        new_jobs = self.search([('state', 'in', ['new'])]) if all_job else False\r\n        if not for_new:\r\n            for_new = True\r\n\r\n        if new_jobs:\r\n            is_the_last_step = True\r\n            self.env['sf.queue.jobs'].process_queue_jobs(for_new=for_new)\r\n\r\n        salesforce.last_sync_date = fields.Date.today()\r\n        #: After all the records are fetched ,start a cron and save the data\r\n        if not is_the_last_step:\r\n            cron_record = self.env.ref('salesforce_connector.sf_ir_cron_records_sync_process_1')\r\n            if cron_record:\r\n                model_names = list(type(self).all_sf_models)\r\n                records = self.env['sf.queue.jobs'].search([('sf_model', 'in', model_names),\r\n                                                            ('import_status', '=', 'not_imported')])\r\n                try:\r\n                    sorted_records_by_count = records.sorted(key=lambda r: r.record_count)\r\n                    # ex_record_ids = [(r.id, r.record_count) for r in sorted_records_by_count]\r\n                    all_records = []\r\n                    salesforce = self.env['salesforce.connector'].browse(1)\r\n                    if salesforce:\r\n                        m = salesforce.max_rec_per_job\r\n                    else:\r\n                        m = 250\r\n\r\n                    while True:\r\n                        sub_rec = []\r\n                        total = 0\r\n                        for rec in sorted_records_by_count:\r\n                            total = total + rec.record_count\r\n                            if total <= m:\r\n                                sub_rec.append(rec.id)\r\n                            else:\r\n                                all_records.append(sub_rec)\r\n                                sub_rec = [rec.id]\r\n                                total = rec.record_count\r\n                                # if this record size is greater than the what we have specified then\r\n                                # break that record into multiple records\r\n                                if total > m:\r\n                                    sf_records = json.loads(rec.job_records)\r\n                                    total = len(sf_records)\r\n                                    initial = 0\r\n                                    next = m\r\n                                    break_upper_limit = total // m\r\n                                    _logger.info(f'Breaking up record in {break_upper_limit}')\r\n                                    new_job_records_ids = []\r\n                                    for i in range(break_upper_limit):\r\n                                        new_job = rec.copy()\r\n                                        new_job_records_ids.append(new_job.id)\r\n                                        next_job_batch_record = sf_records[initial:next] or []\r\n                                        # set record count for the new job\r\n                                        new_job.record_count = len(next_job_batch_record)\r\n                                        new_job.job_records = json.dumps(next_job_batch_record)\r\n                                        # set job_records for the new job\r\n                                        sf_records = sf_records[next:]\r\n                                    # if still left something in sf_records create a\r\n                                    if sf_records:\r\n                                        rec.record_count = len(sf_records)\r\n                                        rec.job_records = json.dumps(sf_records)\r\n                                    else:\r\n                                        rec.unlink()\r\n                                    # set total to 0\r\n                                    total = 0\r\n                        # if sub_rec:\r\n                        #     all_records.append(sub_rec)\r\n                        break\r\n\r\n                except Exception as e:\r\n                    all_records = records.ids\r\n                    _logger.info('Exception Occur %s, going single record processing ', e)\r\n\r\n                next_exc_time = datetime.now() + timedelta(microseconds=200)\r\n                cron_record.sudo().write({'nextcall': next_exc_time})\r\n                cron_record.sudo().write({'active': True,\r\n                                          'numbercall': 1\r\n                                          })\r\n                code_to_run = f\"model.process_saving_records(records={all_records})\"\r\n                type(self).all_sf_models = set()\r\n                cron_record.sudo().write({'code': code_to_run})\r\n\r\n        # salesforce.env.cr.commit()\r\n\r\n    def process_failed_records(self):\r\n        cron_record = self.env.ref('salesforce_connector.sf_ir_cron_job_process')\r\n        if cron_record:\r\n            next_exc_time = datetime.now()\r\n            cron_record.sudo().write({'nextcall': next_exc_time,\r\n                                      'active': True,\r\n                                      'numbercall': 1\r\n                                      })\r\n            cron_record.sudo().write({'code': 'model.process_queue_jobs(for_new=False)'})\r\n\r\n    def update_salesforce_data(self, salesforce, record, sf_model, odoo_model, data):\r\n        other = 0\r\n        val = []\r\n        for rec in data:\r\n            json_data = salesforce._prepare_create_data(rec, odoo_model, sf_model)\r\n            if '__not_needed_record' in json_data and len(json_data) == 1:\r\n                other = other + 1\r\n                continue\r\n\r\n            if json_data:\r\n                if sf_model == 'Opportunity':\r\n                    json_data.update({'type': 'opportunity'})\r\n                val.append(json_data)\r\n        if val:\r\n            try:\r\n                salesforce._create_records_in_odoo(odoo_model.model, sf_model, val)\r\n            except Exception as e:\r\n                raise e\r\n        else:\r\n            if other != len(data):\r\n                self.env['salesforce.sync.history'].create_log_param(sf_model, '',\r\n                                                                     'failed',\r\n                                                                     'salesforce_to_odoo', 'Field Mapping can not be done!')\r\n                record.state = 'failed'\r\n\r\n    def update_fields_on_records(self, model, sf_model):\r\n        \"\"\"\r\n        This method update created by, last modified by, salesperson id by looking up salesforce user in odoo as well as\r\n        in the salesforce if id is not found\r\n        `The field name of above three fields should be`\r\n        `sf_salesperson_id`, `sf_created_by_id`, `sf_last_modified_by_id`\r\n\r\n        :param model: model record\r\n        :param sf_model: the name of the salesforce model\r\n        :return:\r\n        \"\"\"\r\n        try:\r\n            _logger.info('Started updating dates and users')\r\n            # update fields on record such as create date and user_id\r\n            # replace '.' with '_' in res.partner to make res_partner which is the actual table name in db\r\n            model = model.model.replace('.', '_')\r\n            # found where sf_ids are not updated\r\n            records_q = f\"\"\"\r\n                SELECT sf_salesperson_id,sf_created_by_id,sf_last_modified_by_id from {model} \r\n                WHERE sf_salesperson_id != 'NULL' or \r\n                sf_created_by_id !='NULL' or \r\n                sf_last_modified_by_id != 'NULL';\r\n                \"\"\"\r\n            # print(records_q)\r\n            self.env.cr.execute(records_q)\r\n            results = self.env.cr.dictfetchall()\r\n            # print()\r\n            #: found unique sf_ids using set\r\n            salesforce_ids = set()\r\n            if results:\r\n                for record in results:\r\n                    if record['sf_salesperson_id']:\r\n                        salesforce_ids.add(record['sf_salesperson_id'])\r\n                    if record['sf_created_by_id']:\r\n                        salesforce_ids.add(record['sf_created_by_id'])\r\n                    if record['sf_last_modified_by_id']:\r\n                        salesforce_ids.add(record['sf_last_modified_by_id'])\r\n\r\n                existed_users_id = {}\r\n                #: search res.users for the sf_ids\r\n                users = self.env['res.users'].search(['|', ('active', '=', True), ('active', '=', False),\r\n                                                      ('salesforce_user_id', 'in', list(salesforce_ids))])\r\n\r\n                #: make a dict with sf_id : res_user.id\r\n                for user in users:\r\n                    existed_users_id[user.salesforce_user_id] = user.id\r\n                #: found which sf_id don't have user\r\n                remaining_users = salesforce_ids.difference(set(existed_users_id.keys()))\r\n                remaining_users_info = {}\r\n                #: call API for that sf_id and fetch the details of that ID\r\n                if remaining_users:\r\n                    remaining_users_info = self.env['salesforce.connector'].get_user_info(tuple(remaining_users))\r\n\r\n                if remaining_users_info:\r\n                    #: loop through the newly fetched ids\r\n                    for remain_user in remaining_users_info:\r\n                        new_user = self.env['res.users'].create({\r\n                                'name': remain_user['Name'],\r\n                                'salesforce_user_id': remain_user['Id'],\r\n                                'email': remain_user['Username']+'.ODOO',\r\n                                'login': remain_user['Username']+'.ODOO',\r\n                                'active': remain_user['IsActive'],\r\n                                'sel_groups_1_8_9': 1,\r\n                        })\r\n                        if new_user:\r\n                            existed_users_id[remain_user['Id']] = new_user.id\r\n\r\n                #: update the user_ids wherever necessary\r\n                for user in existed_users_id:\r\n                    user_id_q = f\"UPDATE {model} SET user_id = {existed_users_id[user]} WHERE sf_salesperson_id = '{user}'\"\r\n                    create_id_q = f\"UPDATE {model} SET create_uid = {existed_users_id[user]} WHERE sf_created_by_id = '{user}'\"\r\n                    modify_id_q = f\"UPDATE {model} SET write_uid = {existed_users_id[user]} WHERE sf_last_modified_by_id = '{user}'\"\r\n                    self.env.cr.execute(user_id_q)\r\n                    self.env.cr.execute(create_id_q)\r\n                    self.env.cr.execute(modify_id_q)\r\n\r\n                update_create_date = f\"UPDATE {model} SET create_date = sf_created_date WHERE sf_created_date is not NULL\"\r\n                set_sf_create_date = f\"UPDATE {model} SET sf_created_date = NULL WHERE sf_created_date is not NULL\"\r\n\r\n                #: put null wherever the res.users id are updated\r\n                set_users = f\"\"\"\r\n                            UPDATE {model} SET sf_salesperson_id = NULL,sf_created_by_id = NULL,\r\n                            sf_last_modified_by_id = NULL \r\n                            WHERE sf_created_by_id is not null or \r\n                            sf_last_modified_by_id is not null or\r\n                            sf_salesperson_id is not null\r\n                            \"\"\"\r\n                self.env.cr.execute(update_create_date)\r\n                self.env.cr.execute(set_sf_create_date)\r\n                self.env.cr.execute(set_users)\r\n                _logger.info('finished updating dates and users')\r\n\r\n            if sf_model in ['Account', 'Contact']:\r\n                self.get_account_records_image()\r\n\r\n        except Exception as e:\r\n            print(e)\r\n            self.env['salesforce.sync.history'].create_log_param(\r\n                    sf_model, '', 'failed',\r\n                    'salesforce_to_odoo',\r\n                    sf_model + ' record updation failed,record created ' + str(e))\r\n\r\n    def get_account_records_image(self):\r\n        salesforce = self.env['salesforce.connector'].browse(1)\r\n        if not salesforce.sales_force:\r\n            salesforce.connect_to_salesforce()\r\n\r\n        photo_urls = self.env['res.partner'].search([('sf_photo_url', '!=', None)])\r\n        try:\r\n            sf_instance_url = f\"https://{salesforce.sales_force.sf_instance}\"\r\n            for photo_url in photo_urls:\r\n                #: create url for the account profile pic\r\n                url = f\"https://{salesforce.sales_force.sf_instance}{photo_url.sf_photo_url}\"\r\n                #: get the response for the url\r\n                img_response = salesforce.sales_force._call_salesforce('GET', url)\r\n                if img_response.status_code == 200 and not img_response.url.startswith(sf_instance_url):\r\n                    base64_image = encodebytes(img_response.content)\r\n                    res = photo_url.write({'image_1920': base64_image})\r\n                    if res:\r\n                        _logger.info('account record image updated- size %s', len(img_response.content))\r\n                    else:\r\n                        _logger.info('%s account record image failed to update status code %s', img_response.status_code)\r\n                else:\r\n                    _logger.info('Profile pic is placeholder, not updating, Skipping')\r\n            update_photo_url = f\"UPDATE res_partner SET sf_photo_url = null WHERE sf_photo_url is not NULL\"\r\n            self.env.cr.execute(update_photo_url)\r\n        except Exception as e:\r\n            _logger.info('Error occurred while updating image %s', e)\r\n\r\n\r\nclass SaveSalesforceData(models.Model):\r\n    _name = 'sf.sync.data'\r\n    _rec_name = 'field_name'\r\n    _description = 'This is used to Sync/Save all the records in odoo'\r\n    _order = 'id desc'\r\n\r\n    field_name = fields.Char('salesforce_connector')\r\n    include_custm = fields.Boolean('Include Custom Fields')\r\n    accounts = fields.Boolean('Save Accounts')\r\n    contacts = fields.Boolean('Save Contacts')\r\n    individuals = fields.Boolean('Save Individuals')\r\n    partner_ntwrk_con = fields.Boolean('Save Partner Network Connection')\r\n    pricebook = fields.Boolean('Save Pricebook')\r\n    rep__c = fields.Boolean('Save Rep__c')\r\n    leads = fields.Boolean('Save Leads')\r\n    opportunities = fields.Boolean('Save Opportunities')\r\n    task = fields.Boolean('Save Task')\r\n    from_date = fields.Date('From Date', store=True, required=True, compute=\"_compute_date\",\r\n                            default=fields.Date.today() + relativedelta(days=-7))\r\n    to_date = fields.Date('To Date', store=True, required=True, compute=\"_compute_date\", default=fields.Date.today())\r\n    process_extra_fields = fields.Boolean('Process Dates and users?', default=True)\r\n    re_import = fields.Boolean('Re-save already saved records?', default=False)\r\n\r\n    max_rec_to_fetch = fields.Integer('Max Sales docs to fetch', default=100)\r\n    max_tasks_to_covert = fields.Integer('Max Tasks per job', default=500)\r\n\r\n    max_sale_attachments_to_process = fields.Integer('Max Sales URL records to process',default=300)\r\n    sale_attachments_left = fields.Char('Total Opportunity records left to process', compute='left_for_attachment')\r\n    tasks_left_to_convert = fields.Char('Total tasks left to convert', compute='tasks_left_for_conversion')\r\n\r\n    # total sale order attachments present in the system\r\n    total_sale_order_attachments = fields.Integer('Total Sale Order Attachments', compute='get_total_so_attachments')\r\n    total_so_attachments_left_to_map = fields.Integer('Total Sale Order Attachments left to process',\r\n                                                      compute='get_left_so_attachments')\r\n    process_processed_order = fields.Boolean('Process Already Processed Order ', default=False)\r\n    sf_records_ratio = fields.Html('All Sf Models Records Count', compute='get_salesforce_to_odoo_ratio', store=True)\r\n\r\n    def get_salesforce_to_odoo_ratio(self):\r\n        sf = self.env['salesforce.connector'].browse(1)\r\n        if not sf.sales_force:\r\n            sf.connect_to_salesforce()\r\n        sf_models = self.env['sf.model.mapping'].search([])\r\n        self.sf_records_ratio = ''\r\n        new_total = []\r\n        for sf_model in sf_models:\r\n            try:\r\n                # fetch total records count from salesforce\r\n                query = \"SELECT COUNT(Id) FROM {sf_model} where Id !=null\".format(sf_model=sf_model.sf_model),\r\n                records = sf.sales_force.query_all(query)['records']\r\n                records_count = records[0].get('expr0', 0)\r\n                # fetch total salesforce records from the mapped model\r\n                salesforce_id = 'sf_id'\r\n                if sf_model.o_model.model == 'res.partner':\r\n                    if sf_model.sf_model == 'Contact':\r\n                        salesforce_id = 'sf_contact_id'\r\n                    if sf_model.sf_model == 'Account':\r\n                        salesforce_id = 'sf_account_id'\r\n                    if sf_model.sf_model == 'Individual':\r\n                        salesforce_id = 'sf_individual_id'\r\n                # set initial domain\r\n                domain = [(salesforce_id, '!=', False),('active','in',[True,False])]\r\n                if sf_model.o_model.model == 'crm.lead':\r\n                    if sf_model.sf_model == 'Lead':\r\n                        domain.append(('type','=','lead'))\r\n                    if sf_model.sf_model == 'Opportunity':\r\n                        domain.append(('type','=','opportunity'))\r\n\r\n                sf_odoo_records = self.env[sf_model.o_model.model].search_count(domain)\r\n                new_total.append(f'<p style=\"font-size:1.2rem;\">{sf_model.sf_model}: <span style=\"color:green;\">{sf_odoo_records}</span>'\r\n                                 f'/<b>{records_count} </b></p>')\r\n            except Exception as e:\r\n                _logger.info(f'Error occur while counting records {e}')\r\n                continue\r\n\r\n        self.sf_records_ratio = ''.join(new_total)\r\n\r\n    def refresh_total_records(self):\r\n        self.get_salesforce_to_odoo_ratio()\r\n\r\n    def get_left_so_attachments(self):\r\n        total_so = self.env['sales.docs.url'].search([('title','ilike','sales order%'),('is_so_mapped', '=', False)])\r\n        self.total_so_attachments_left_to_map = len(total_so)\r\n\r\n    def get_total_so_attachments(self):\r\n        total_so = self.env['sales.docs.url'].search([('title','ilike','sales order%')])\r\n        self.total_sale_order_attachments = len(total_so)\r\n\r\n    def left_for_attachment(self):\r\n        # total salesforce opportunities\r\n        total_saleforce_opps = self.env['crm.lead'].search([('type', '=', 'opportunity'), ('sf_id', '!=', False)])\r\n        # ('sales_import_status', '=', 'not_imported')\r\n        not_processes_ones = total_saleforce_opps.filtered(lambda opp: opp.sales_import_status == 'not_imported')\r\n        self.sale_attachments_left = f'{len(not_processes_ones)} out of {len(total_saleforce_opps)}'\r\n\r\n    def tasks_left_for_conversion(self):\r\n        all_salesforce_tasks = self.env['salesforce.tasks'].search([('what_Type', '!=', False)])\r\n\r\n        left_to_convert = all_salesforce_tasks.filtered(lambda task: not task.is_converted and task.what_Type)\r\n        self.tasks_left_to_convert = f'{len(left_to_convert)} out of {len(all_salesforce_tasks)}'\r\n\r\n    @api.onchange('max_rec_to_fetch')\r\n    def on_change_max_rec_fetch(self):\r\n        if self.max_rec_to_fetch and self.max_rec_to_fetch > 400:\r\n            raise ValidationError(_('Max rec count can not be greater then 400'))\r\n\r\n    def _compute_date(self):\r\n        self.from_date = fields.Date.today() - relativedelta(days=-30)\r\n        self.to_date = fields.Date.today()\r\n\r\n    @api.onchange('from_date', 'to_date')\r\n    def _validate_range_date(self):\r\n        if self.from_date and self.to_date:\r\n            if self.from_date > self.to_date or self.from_date == self.to_date:\r\n                raise ValidationError(_('Date must be in valid range.!!'))\r\n\r\n    def save_salesforce_data(self):\r\n        flag = False\r\n        type_of_record = []\r\n        if self.accounts:\r\n            flag = True\r\n            type_of_record.append('Account')\r\n        if self.contacts:\r\n            flag = True\r\n            type_of_record.append('Contact')\r\n        if self.individuals:\r\n            flag = True\r\n            type_of_record.append('Individual')\r\n        if self.partner_ntwrk_con:\r\n            flag = True\r\n            type_of_record.append('PartnerNetworkConnection')\r\n        if self.pricebook:\r\n            flag = True\r\n            type_of_record.append('Pricebook2')\r\n        if self.rep__c:\r\n            flag = True\r\n            type_of_record.append('Rep__c')\r\n        if self.opportunities:\r\n            flag = True\r\n            type_of_record.append('Opportunity')\r\n        if self.leads:\r\n            flag = True\r\n            type_of_record.append('Lead')\r\n        if self.task:\r\n            flag = True\r\n            type_of_record.append('Task')\r\n\r\n        if not flag:\r\n            raise Warning(_(\"No Option Checked.\",))\r\n\r\n        if self.env.context.get('is_range_wise', False):\r\n            self.start_cron_for_saving_data(type_of_record, True)\r\n        else:\r\n            self.start_cron_for_saving_data(type_of_record)\r\n\r\n    def start_cron_for_saving_data(self, for_sf_model, is_range_wise=False):\r\n        # Started cron for given sf_model like opportunity,Accounts,Individual\r\n        cron_record = self.env.ref('salesforce_connector.sf_ir_cron_records_sync_process_1')\r\n        if cron_record:\r\n            import_status = ['not_imported', 're_import']\r\n            #: if we re-import already imported records then we will search by both import_status\r\n            #: i.e; imported and not_imported\r\n            if self.re_import:\r\n                import_status.append('imported')\r\n\r\n            if is_range_wise:\r\n                records = self.env['sf.queue.jobs'].search([('sf_model', 'in', for_sf_model),\r\n                                                            ('import_status', 'in', import_status),\r\n                                                            ('from_date', '>=', self.from_date),\r\n                                                            ('from_date', '<=', self.to_date),\r\n                                                            ('record_count', '>', 0)])\r\n            else:\r\n                records = self.env['sf.queue.jobs'].search([('sf_model', 'in', for_sf_model),\r\n                                                            ('import_status', 'in', import_status),\r\n                                                            ('record_count', '>', 0)])\r\n            if self.re_import:\r\n                #: if we re-importing the records then change the import_status to re_import\r\n                for rec in records:\r\n                    rec.import_status = 're_import'\r\n            try:\r\n                sorted_records_by_count = records.sorted(key=lambda r: r.record_count)\r\n                # ex_record_ids = [(r.id, r.record_count) for r in sorted_records_by_count]\r\n                all_records = []\r\n                salesforce = self.env['salesforce.connector'].browse(1)\r\n                if salesforce:\r\n                    m = salesforce.max_rec_per_job\r\n                else:\r\n                    m = 250\r\n\r\n                while True:\r\n                    sub_rec = []\r\n                    total = 0\r\n                    for rec in sorted_records_by_count:\r\n                        total = total + rec.record_count\r\n                        if total <= m:\r\n                            sub_rec.append(rec.id)\r\n                        else:\r\n                            all_records.append(sub_rec)\r\n                            sub_rec = [rec.id]\r\n                            total = rec.record_count\r\n                            # if this record size is greater than the what we have specified then\r\n                            # break that record into multiple records\r\n                            if total > m:\r\n                                sf_records = json.loads(rec.job_records)\r\n                                total = len(sf_records)\r\n                                initial = 0\r\n                                next = m\r\n                                break_upper_limit = total // m\r\n                                _logger.info(f'Breaking up record in {break_upper_limit}')\r\n                                new_job_records_ids = []\r\n                                for i in range(break_upper_limit):\r\n                                    new_job = rec.copy()\r\n                                    new_job_records_ids.append(new_job.id)\r\n                                    next_job_batch_record = sf_records[initial:next] or []\r\n                                    # set record count for the new job\r\n                                    new_job.record_count = len(next_job_batch_record)\r\n                                    new_job.job_records = json.dumps(next_job_batch_record)\r\n                                    # set job_records for the new job\r\n                                    sf_records = sf_records[next:]\r\n                                # if still left something in sf_records create a\r\n                                if sf_records:\r\n                                    rec.record_count = len(sf_records)\r\n                                    rec.job_records = json.dumps(sf_records)\r\n                                else:\r\n                                    rec.unlink()\r\n                                # set total to 0\r\n                                total = 0\r\n                    # if sub_rec:\r\n                    #     all_records.append(sub_rec)\r\n                    break\r\n            except Exception as e:\r\n                all_records = records.ids\r\n                _logger.info('Exception Occur %s, going single record processing ', e)\r\n\r\n            if records:\r\n                next_exc_time = datetime.now() + timedelta(milliseconds=5)\r\n                cron_record.sudo().write({'nextcall': next_exc_time,\r\n                                          'active': True,\r\n                                          'numbercall': 1\r\n                                          })\r\n                code_to_run = f\"model.process_saving_records(records={all_records})\"\r\n                cron_record.sudo().write({'code': code_to_run})\r\n\r\n    def process_saving_records(self, records=None):\r\n        try:\r\n            # cron_record = self.env.ref('salesforce_connector.sf_ir_cron_job_process')\r\n            # set process_queue_jobs cron active to false so that it won't run again\r\n            # we don't want it run again\r\n            # cron_record.sudo().write({'active': False})\r\n            if records:\r\n                salesforce = self.env['salesforce.connector'].browse(1)\r\n                #: pop a job_id pack from records\r\n                job_id_pack = records.pop()\r\n                if type(job_id_pack) != list:\r\n                    job_id_pack = [job_id_pack]\r\n\r\n                for job_id in job_id_pack:\r\n                    job = self.env['sf.queue.jobs'].search([('id', '=', job_id)])\r\n                    if job and job.job_records:\r\n                        sf_records = []\r\n                        try:\r\n                            sf_records = json.loads(job.job_records)\r\n                            _logger.info(f'Job contains {len(sf_records)}')\r\n                            job.update_salesforce_data(salesforce, job, job.sf_model, job.odoo_model, sf_records)\r\n                            job.import_status = 'imported'\r\n                            if job.odoo_model and job.sf_model in ['Account', 'Contact', 'Individual', 'Lead',\r\n                                                                   'Opportunity','Task']:\r\n                                job.update_fields_on_records(job.odoo_model, job.sf_model)\r\n                            _logger.info('%s job is processed', job.sf_model)\r\n                            job.env.cr.commit()\r\n                        except Exception as e:\r\n                            job.env.cr.rollback()\r\n                            job.import_status = 'not_imported'\r\n                            _logger.info('%s Exception occur during commit in cron', e)\r\n                            job.env['salesforce.sync.history'].create_log_param(\r\n                                    job.sf_model, '', 'failed',\r\n                                    'salesforce_to_odoo',\r\n                                    job.sf_model + ' With error ' + str(e))\r\n                        _logger.info('Processed %s records of %s ', len(sf_records), job.sf_model)\r\n                        _logger.info('%s records are saved', len(sf_records))\r\n\r\n        finally:\r\n            cron_record = self.env.ref('salesforce_connector.sf_ir_cron_records_sync_process_2')\r\n            if cron_record and records:\r\n                next_exc_time = datetime.now() + timedelta(milliseconds=15)\r\n                cron_record.write({'nextcall': next_exc_time,\r\n                                   'active': True,\r\n                                   'numbercall': 1})\r\n                code_to_run = f\"model.set_run_state_cron(records={records})\"\r\n                cron_record.write({'code': code_to_run})\r\n            else:\r\n                # when there are no more records to save then run `start_convert_task_to_activities` method\r\n                # to convert tasks to activities and start the cron to fetch the opportunity attachments as well\r\n                self.env.ref('salesforce_connector.sf_sync_record').start_convert_task_to_activities()\r\n                # start converting salesforce tasks to activities\r\n                self.env.ref('salesforce_connector.sf_sync_record').start_fetching_records_for_attachments()\r\n                # start fetching records for opportunity attachments\r\n\r\n    def set_run_state_cron(self, records):\r\n        \"\"\"\r\n        This method is for helper cron job which will help calling in the main save cron\r\n        so that it can run again ,it is acting like a helper cron job\r\n        \"\"\"\r\n        cron_record = self.env.ref('salesforce_connector.sf_ir_cron_records_sync_process_1')\r\n        if cron_record:\r\n            next_exc_time = datetime.now() + timedelta(milliseconds=5)\r\n            cron_record.write({'nextcall': next_exc_time,\r\n                               'active': True,\r\n                               'numbercall': 1\r\n                               })\r\n            code_to_run = f\"model.process_saving_records(records={records})\"\r\n            cron_record.write({'code': code_to_run})\r\n\r\n    def start_fetching_records_for_attachments(self):\r\n        opp_s = self.env['crm.lead'].search([('type', '=', 'opportunity'), ('sf_id', '!=', False),\r\n                                             ('sales_import_status', '=', 'not_imported')])\r\n        all_records = []\r\n        all_opp_s = opp_s.ids\r\n        n = self.max_rec_to_fetch\r\n        if opp_s:\r\n            for i in range(0, len(all_opp_s), n):\r\n                all_records.append(all_opp_s[i:i + n])\r\n\r\n        cron_record = self.env.ref('salesforce_connector.sf_ir_cron_sales_doc_fetch_process_1')\r\n        if cron_record and all_records:\r\n            next_exc_time = datetime.now() + timedelta(milliseconds=5)\r\n            cron_record.write({'nextcall': next_exc_time,\r\n                               'active': True,\r\n                               'numbercall': 1\r\n                               })\r\n            code_to_run = f\"model.get_sale_order_document(records={all_records})\"\r\n            cron_record.write({'code': code_to_run})\r\n\r\n    def start_saving_sales_docs_urls(self):\r\n        sales_docs_url = self.env['sales.docs.url'].search(['&', ('status', '=', 'no'),\r\n                                                            '|', ('type', 'in', ['application/pdf', 'pdf', 'PDF']),\r\n                                                            ('title', 'ilike', '%.pdf')])\r\n\r\n        all_records = []\r\n        all_opp_s = sales_docs_url.ids\r\n        n = self.max_rec_to_fetch\r\n        if sales_docs_url:\r\n            for i in range(0, len(all_opp_s), n):\r\n                all_records.append(all_opp_s[i:i + n])\r\n\r\n        cron_record = self.env.ref('salesforce_connector.sf_ir_cron_sales_doc_save_process_1')\r\n        if cron_record and all_records:\r\n            next_exc_time = datetime.now() + timedelta(milliseconds=5)\r\n            cron_record.write({'nextcall': next_exc_time,\r\n                               'active': True,\r\n                               'numbercall': 1})\r\n            code_to_run = f\"model.save_sales_doc_attachments(records={all_records})\"\r\n            cron_record.write({'code': code_to_run})\r\n\r\n    # start converting salesforce task to activities\r\n    # group the task records into segments\r\n    def start_convert_task_to_activities(self):\r\n        \"\"\"\r\n        This is method that need to be called after fetching salesforce tasks, to convert them to odoo tasks\r\n        we have to call this explicitly ,it won't run automatically\r\n        :return:\r\n        \"\"\"\r\n        all_salesforce_tasks = self.env['salesforce.tasks'].search([('is_converted', '=', False),\r\n                                                                    ('what_Type', '!=', False)])\r\n\r\n        all_records = []\r\n        all_tasks = all_salesforce_tasks.ids\r\n        n = self.max_tasks_to_covert\r\n        if all_salesforce_tasks:\r\n            for i in range(0, len(all_tasks), n):\r\n                all_records.append(all_tasks[i:i + n])\r\n\r\n        cron_record = self.env.ref('salesforce_connector.sf_tasks_conversion_process_1')\r\n        if cron_record and all_records:\r\n            next_exc_time = datetime.now() + timedelta(milliseconds=5)\r\n            cron_record.write({'nextcall': next_exc_time,\r\n                               'active': True,\r\n                               'numbercall': 1\r\n                               })\r\n            code_to_run = f\"model.convert_salesforce_tasks_to_activities(records={all_records})\"\r\n            cron_record.write({'code': code_to_run})\r\n\r\n    def convert_salesforce_tasks_to_activities(self, records=None):\r\n        try:\r\n            related_res_model_names = {'Account': 'res.partner',\r\n                                       'Opportunity': 'crm.lead'}\r\n            if records:\r\n                record_ids = records.pop()\r\n                sf_tasks_recs = self.env['salesforce.tasks'].browse(record_ids)\r\n\r\n                for sf_task_rec in sf_tasks_recs:\r\n                    #: get the related opportunity record for this sales doc url\r\n                    # sf_task_rec = self.env['salesforce.tasks'].browse([sf_task_rec_id])\r\n                    if not sf_task_rec.What or not sf_task_rec.what_Type:\r\n                        sf_task_rec.conversion_status = 'No Related model/record ID is present'\r\n                        continue\r\n\r\n                    if not sf_task_rec.user_id:\r\n                        sf_task_rec.conversion_status = 'No User id present on this task'\r\n                        continue\r\n\r\n                    if not sf_task_rec.Type:\r\n                        sf_task_rec.conversion_status = 'No Task type present'\r\n                        continue\r\n\r\n                    res_model_name = related_res_model_names[sf_task_rec.what_Type]\r\n                    mail_activity_type_id = self.env['salesforce.task.type.mapping'].search([('task_name','=', sf_task_rec.Type.id)], limit=1)\r\n                    if not mail_activity_type_id:\r\n                        sf_task_rec.conversion_status = 'No Related mail activity type is present'\r\n                        continue\r\n\r\n                    search_domain = []\r\n                    if res_model_name == 'crm.lead':\r\n                        search_domain = [('sf_id','=', sf_task_rec.What), ('type','=','opportunity')]\r\n                    elif res_model_name == 'res.partner':\r\n                        search_domain = [('sf_account_id','=', sf_task_rec.What)]\r\n\r\n                    opp_rec = self.env[res_model_name].search(search_domain, limit=1)\r\n                    if not opp_rec:\r\n                        sf_task_rec.conversion_status = 'No related record found'\r\n                        continue\r\n                    try:\r\n                        res_model = self.env['ir.model'].search([('model', '=', res_model_name)])\r\n                        mail_activity_values = {'res_model_id': res_model.id,\r\n                                                'user_id': sf_task_rec.user_id.id,\r\n                                                'res_id': opp_rec.id,\r\n                                                'activity_type_id': mail_activity_type_id.mapped_task_name.id,\r\n                                                'summary': sf_task_rec.Subject,\r\n                                                'date_deadline': sf_task_rec.ActivityDate or datetime.now()\r\n                                                }\r\n\r\n                        create_uid = sf_task_rec.user_id\r\n                        user_id = sf_task_rec.user_id\r\n\r\n                        if sf_task_rec.create_uid:\r\n                            create_uid = sf_task_rec.create_uid\r\n\r\n                        activity_res = self.env['mail.activity'].with_user(create_uid).sudo().with_context({'mail_activity_quick_update': True}).create(mail_activity_values)\r\n                        if activity_res:\r\n                            activity_res.imported_task_id = sf_task_rec.id\r\n                            sf_task_rec.activity_id = activity_res.id\r\n                            sf_task_rec.is_converted = True\r\n                            sf_task_rec.conversion_status = 'Activity Created'\r\n\r\n                            _logger.info(f'Activity created for task rec {sf_task_rec.id}')\r\n                            if sf_task_rec.Status.lower() == 'completed':\r\n                                cTX = self.env.context.copy()\r\n                                cTX['no_lead_score_popup'] = True\r\n                                cTX['import_salesforce_tasks'] = True\r\n                                cTX['CompletedDateTime'] = sf_task_rec.CompletedDateTime\r\n                                comments = sf_task_rec.Description\r\n                                mail_message_id = activity_res.with_user(user_id).sudo().with_context(cTX).action_feedback(feedback=comments)\r\n                                if mail_message_id:\r\n                                    activity_done_date = sf_task_rec.CompletedDateTime or datetime.now()\r\n                                    query = f\"Update mail_message set imported_task_id={sf_task_rec.id},\" \\\r\n                                            f\"date='{activity_done_date}',create_date='{activity_done_date}',\" \\\r\n                                            f\"write_date='{activity_done_date}' where id={mail_message_id}\"\r\n                                    self.env.cr.execute(query)\r\n                                    sf_task_rec.activity_message_id = mail_message_id\r\n                                    # sf_task_rec.is_converted = True\r\n                                    sf_task_rec.conversion_status = 'Activity Created and set to done'\r\n                                    _logger.info('Mail message date updated')\r\n\r\n                            activity_exist = self.env['mail.activity'].sudo().browse(activity_res.ids)\r\n                            if activity_exist:\r\n                                create_date = sf_task_rec.create_date\r\n                                query = f\"Update mail_activity set create_date='{create_date}' where id={activity_exist.id}\"\r\n                                self.env.cr.execute(query)\r\n                                _logger.info('Activity create date updated')\r\n\r\n                    except Exception as e:\r\n                        sf_task_rec.conversion_status = str(e)\r\n                        self.env['salesforce.sync.history'].create_log_param(\r\n                                'Task','', 'failed', 'salesforce_to_odoo',\r\n                                f\"task conversion failed for {opp_rec.name} with error {str(e)}\")\r\n        except Exception as e:\r\n            self.env['salesforce.sync.history'].create_log_param(\r\n                    'Task', '', 'failed', 'salesforce_to_odoo',\r\n                    f\"task conversion failed with error {str(e)}\")\r\n            _logger.info('task conversion failed with %s', str(e))\r\n\r\n        finally:\r\n            cron_record = self.env.ref('salesforce_connector.sf_tasks_conversion_helper_process_2')\r\n            if cron_record and records:\r\n                next_exc_time = datetime.now() + timedelta(milliseconds=1)\r\n                cron_record.write({'nextcall': next_exc_time,\r\n                                   'active': True,\r\n                                   'numbercall': 1\r\n                                   })\r\n                code_to_run = f\"model.helper_convert_salesforce_tasks(records={records})\"\r\n                cron_record.write({'code': code_to_run})\r\n            elif cron_record and not records:\r\n                # empty the argument list from the helper cron job\r\n                next_exc_time = datetime.now() + timedelta(milliseconds=1)\r\n                cron_record.write({'nextcall': next_exc_time})\r\n                code_to_run = f\"model.helper_convert_salesforce_tasks(records=None)\"\r\n                cron_record.write({'code': code_to_run})\r\n                _logger.info('All tasks are converted!!')\r\n\r\n    def helper_convert_salesforce_tasks(self, records):\r\n        \"\"\"\r\n        This method is for helper cron job which will help calling in the main save cron\r\n        so that it can run again ,it is acting like a helper cron job\r\n        \"\"\"\r\n        cron_record = self.env.ref('salesforce_connector.sf_tasks_conversion_process_1')\r\n        if cron_record and records:\r\n            next_exc_time = datetime.now() + timedelta(milliseconds=1)\r\n            cron_record.write({'nextcall': next_exc_time,\r\n                               'active': True,\r\n                               'numbercall': 1\r\n                               })\r\n            code_to_run = f\"model.convert_salesforce_tasks_to_activities(records={records})\"\r\n            cron_record.write({'code': code_to_run})\r\n        elif cron_record and not records:\r\n            code_to_run = f\"model.convert_salesforce_tasks_to_activities(records=None)\"\r\n            cron_record.write({'code': code_to_run})\r\n\r\n    def start_for_sale_order_processing(self):\r\n        so_mapped_values = [False]\r\n        if self.process_processed_order:\r\n            so_mapped_values.append(True)\r\n        all_salesforce_urls = self.env['sales.docs.url'].search([('title','ilike','sales order%'),\r\n                                                                 ('is_so_mapped', 'in', so_mapped_values)])\r\n        all_records = []\r\n        all_urls = all_salesforce_urls.ids\r\n        n = self.max_sale_attachments_to_process\r\n        if all_salesforce_urls:\r\n            for i in range(0, len(all_urls), n):\r\n                all_records.append(all_urls[i:i + n])\r\n\r\n        cron_record = self.env.ref('salesforce_connector.sf_sale_order_opp_mapping_process_1')\r\n        if cron_record:\r\n            next_exc_time = datetime.now() + timedelta(milliseconds=1)\r\n            cron_record.write({'nextcall': next_exc_time,\r\n                               'active': True,\r\n                               'numbercall': 1\r\n                               })\r\n            code_to_run = f\"model.process_sale_order_file_name(records={all_records})\"\r\n            cron_record.write({'code': code_to_run})\r\n\r\n\r\nclass InheritedMailActivityForTasks(models.Model):\r\n    _inherit = 'mail.activity'\r\n\r\n    # inheriting this because we need the author id to be set for the activity that is made from salesforce task\r\n    # otherwise it will show system/OdooBot\r\n    def _action_done(self, feedback=False, attachment_ids=None):\r\n        if self.env.context.get('import_salesforce_tasks'):\r\n            messages = self.env['mail.message']\r\n            activity_message = False\r\n            for activity in self:\r\n                record = self.env[activity.res_model].sudo().browse(activity.res_id)\r\n                if 'date_done' in self._fields:\r\n                    # update completion time, done , active fields\r\n                    activity_values = {'date_done': self.env.context.get('CompletedDateTime', datetime.now()),\r\n                                       'done': True,\r\n                                       'active': False}\r\n                    activity.with_user(activity.user_id).sudo().write(activity_values)\r\n\r\n                record.with_user(activity.user_id).sudo().message_post_with_view(\r\n                        'mail.message_activity_done',\r\n                        values={\r\n                                'activity': activity,\r\n                                'feedback': feedback,\r\n                                'display_assignee': False\r\n                        },\r\n                        subtype_id=self.env['ir.model.data'].xmlid_to_res_id('mail.mt_activities'),\r\n                        mail_activity_type_id=activity.activity_type_id.id,\r\n                        author_id=activity.user_id.partner_id.id,\r\n                        email_from=activity.user_id.partner_id.email,\r\n                        attachment_ids=[],\r\n                )\r\n                activity_message = record.message_ids[0]\r\n                messages |= activity_message\r\n            return activity_message, False\r\n        return super(InheritedMailActivityForTasks, self)._action_done(feedback=feedback, attachment_ids=attachment_ids)\r\n\r\n\r\nclass OpportunitySalesDocs(models.Model):\r\n    _name = 'opportunity.sales.docs'\r\n    _description = 'Model for storing attachment url for salesforce opportunity sales docs'\r\n\r\n    _rec_name = 'opp_name'\r\n    opp_name = fields.Many2one('crm.lead', string='Opportunity')\r\n    all_urls = fields.One2many('sales.docs.url', 'ref_sales_doc_opp', string='No of attachments')\r\n    fetched_attachments = fields.Integer(string='No of fetched attachments', default=0, compute='count_fetched_att_s')\r\n    is_attachments = fields.Boolean('Any attachments?', default=False)\r\n\r\n    def count_fetched_att_s(self):\r\n        for rec in self:\r\n            if rec.all_urls:\r\n                rec.fetched_attachments = len(rec.all_urls.filtered(lambda x: x.status == 'yes'))\r\n\r\n    def fetch_record_type_file(self, salesforce, file_ids, sf_id):\r\n        \"\"\"\r\n        Fetching those records having RecordType as File from salesforce.\r\n        This method queries VersionData Object of salesforce to query\r\n        :param salesforce:\r\n        :param file_ids:\r\n        :param sf_id:\r\n        :return:\r\n        \"\"\"\r\n        query = ''\r\n        if len(file_ids) > 1:\r\n            query = \"SELECT Id,VersionData,Title,FileType FROM ContentVersion where ContentDocumentId in {att_ids}\" \\\r\n                .format(att_ids=tuple(file_ids))\r\n        elif len(file_ids) == 1:\r\n            query = \"SELECT Id,VersionData,Title,FileType FROM ContentVersion where ContentDocumentId = '{att_ids}'\" \\\r\n                .format(att_ids=file_ids[0])\r\n        if query and sf_id:\r\n            att_records = salesforce.sales_force.query_all(query)['records']\r\n            if att_records:\r\n                all_urls = []\r\n                for sf_at_rec in att_records:\r\n                    if sf_at_rec.get('VersionData', ''):\r\n                        attachment_url = sf_at_rec.get('VersionData', '')\r\n                        if attachment_url:\r\n                            new_att_record = {'name': attachment_url,\r\n                                              'title': sf_at_rec.get('Title'),\r\n                                              'type': sf_at_rec.get('FileType'),\r\n                                              'record_type': 'File'\r\n                                              }\r\n                            if new_att_record:\r\n                                all_urls.append((0, 0, new_att_record))\r\n\r\n                if all_urls:\r\n                    opp_id = self.env['crm.lead'].search([('sf_id', '=', sf_id)], limit=1)\r\n                    sale_doc_url = {'opp_name': opp_id.id,\r\n                                    'is_attachments': True,\r\n                                    'all_urls': all_urls\r\n                                    }\r\n                    res = self.env['opportunity.sales.docs'].create(sale_doc_url)\r\n                    if res:\r\n                        opp_id.write({'sales_import_status': 'imported'})\r\n                        self.env['salesforce.sync.history'].create_log_param(\r\n                                'Opportunity', opp_id.sf_id, 'success',\r\n                                'salesforce_to_odoo', f\"File Record for opportunity {opp_id.name}\")\r\n                        _logger.info(f'File record saved for sf_id {sf_id}')\r\n                    else:\r\n                        _logger.info(f'File record saved failed for sf_id {sf_id} ')\r\n\r\n    def fetch_record_type_attachment(self, salesforce, attachment_ids):\r\n        \"\"\"\r\n        Fetching those records having RecordType as Attachment from salesforce.\r\n        This method queries Attachment Object of salesforce\r\n        :param salesforce:\r\n        :param attachment_ids:\r\n        :return:\r\n        \"\"\"\r\n        query = ''\r\n        if len(attachment_ids) > 1:\r\n            query = \"SELECT Id,ParentId,Name,ContentType,Body FROM Attachment where Id in {att_ids}\" \\\r\n                .format(att_ids=tuple(attachment_ids))\r\n        elif len(attachment_ids) == 1:\r\n            query = \"SELECT Id,ParentId,Name,ContentType,Body FROM Attachment where Id = '{att_ids}'\" \\\r\n                .format(att_ids=attachment_ids[0])\r\n        if query:\r\n            att_records = salesforce.sales_force.query_all(query)['records']\r\n            if att_records:\r\n                all_urls = []\r\n                for sf_at_rec in att_records:\r\n                    if sf_at_rec.get('ParentId', False) and sf_at_rec.get('Body', ''):\r\n                        attachment_url = sf_at_rec.get('Body', '')\r\n                        if attachment_url:\r\n                            new_att_record = {'name': attachment_url,\r\n                                              'title': sf_at_rec.get('Name'),\r\n                                              'type': sf_at_rec.get('ContentType'),\r\n                                              'record_type': 'Attachment'\r\n                                              }\r\n                            if new_att_record:\r\n                                all_urls.append((0, 0, new_att_record))\r\n\r\n                if all_urls:\r\n                    sf_id = att_records[0].get('ParentId', False)\r\n                    opp_id = self.env['crm.lead'].search([('sf_id', '=', sf_id)], limit=1)\r\n                    sale_doc_url = {'opp_name': opp_id.id,\r\n                                    'is_attachments': True,\r\n                                    'all_urls': all_urls\r\n                                    }\r\n                    res = self.env['opportunity.sales.docs'].create(sale_doc_url)\r\n                    if res:\r\n                        opp_id.write({'sales_import_status': 'imported'})\r\n                        self.env['salesforce.sync.history'].create_log_param(\r\n                                'Opportunity', opp_id.sf_id, 'success',\r\n                                'salesforce_to_odoo', f\"Attachment Record for opportunity {opp_id.name}\")\r\n                        _logger.info(f'Attachment record saved for sf_id {sf_id}')\r\n                    else:\r\n                        _logger.info(f'Attachment record saved failed for sf_id {sf_id} ')\r\n\r\n    def get_sale_order_document(self, records=None):\r\n        salesforce = self.env['salesforce.connector'].browse(1)\r\n        if not salesforce.sales_force:\r\n            salesforce.connect_to_salesforce()\r\n        if salesforce.sales_force and records:\r\n            record_ids = records.pop()\r\n            sales_job_record = self.env['crm.lead'].browse(record_ids)\r\n            # fetching the sales docs based on the salesforce id and not part number\r\n            all_sf_ids = [sf_rec.sf_id for sf_rec in sales_job_record]\r\n            if all_sf_ids:\r\n                try:\r\n                    query = \"SELECT (SELECT Id,ParentId,Title,RecordType FROM CombinedAttachments where ParentId in {opp_id})\" \\\r\n                            \" FROM Opportunity WHERE Id in {opp_id}\".format(opp_id=tuple(all_sf_ids))\r\n                    #: All CombinedAttachments records\r\n                    com_att_records = salesforce.sales_force.query_all(query)['records']\r\n                    for rec in com_att_records:\r\n                        if rec.get('CombinedAttachments', False):\r\n                            attachments = rec['CombinedAttachments'].get('records')\r\n                            attachment_ids = [at_rec['Id'] for at_rec in attachments if\r\n                                              at_rec.get('RecordType') == 'Attachment']\r\n\r\n                            file_ids = [at_rec['Id'] for at_rec in attachments if\r\n                                        at_rec.get('RecordType') == 'File']\r\n                            if attachment_ids:\r\n                                self.fetch_record_type_attachment(salesforce, attachment_ids)\r\n                            if file_ids:\r\n                                opp_parent_id = attachments[0].get('ParentId', False)\r\n                                self.fetch_record_type_file(salesforce, file_ids, opp_parent_id)\r\n                    salesforce.env.cr.commit()\r\n\r\n                except Exception as e:\r\n                    sales_job_record.env.cr.rollback()\r\n                    self.env['salesforce.sync.history'].create_log_param(\r\n                            'Opportunity', '', 'failed', 'salesforce_to_odoo',\r\n                            f\"Attachment fetching failed with error {str(e)}\")\r\n                finally:\r\n                    # call the helper cron job to start this job again if records are still remaining\r\n                    cron_record = self.env.ref('salesforce_connector.sf_ir_cron_sales_doc_fetch_process_2')\r\n                    if cron_record and records:\r\n                        next_exc_time = datetime.now() + timedelta(milliseconds=1)\r\n                        cron_record.write({'nextcall': next_exc_time,\r\n                                           'active': True,\r\n                                           'numbercall': 1\r\n                                           })\r\n                        code_to_run = f\"model.helper_fetch_sales_docs(records={records})\"\r\n                        cron_record.write({'code': code_to_run})\r\n                    else:\r\n                        # after fetching all the records start saving them too\r\n                        self.env.ref('salesforce_connector.sf_sync_record').start_saving_sales_docs_urls()\r\n                        _logger.info('All fetching of sales docs of opportunity been done!!')\r\n\r\n    def fetch_current_record_attachments(self):\r\n        try:\r\n            salesforce = self.env['salesforce.connector'].browse(1)\r\n            if not salesforce.sales_force:\r\n                salesforce.connect_to_salesforce()\r\n            for rec in self:\r\n                #: create url for fetching the attachment\r\n                for sf_att_rec in rec.all_urls:\r\n                    if sf_att_rec.type in ['application/pdf', 'pdf', 'PDF'] or sf_att_rec.title.find('.pdf') != -1 or sf_att_rec.title.find('.PDF') != -1:\r\n                        url = f\"https://{salesforce.sales_force.sf_instance}{sf_att_rec.name}\"\r\n                        #: get the response for the attachment\r\n                        file_response = salesforce.sales_force._call_salesforce('GET', url)\r\n                        if file_response.status_code == 200:\r\n                            base64_data = encodebytes(file_response.content)\r\n                            if base64_data:\r\n                                new_attachment = [{'name': sf_att_rec.title,\r\n                                                   'datas': base64_data,\r\n                                                   'res_model': 'crm.lead',\r\n                                                   'res_id': rec.opp_name.id}]\r\n\r\n                                res = self.env['ir.attachment'].create(new_attachment)\r\n                                if res:\r\n                                    sf_att_rec.write({'attachment': [res.id], 'status': 'yes'})\r\n                                    self.env['salesforce.sync.history'].create_log_param(\r\n                                            'Opportunity', rec.opp_name.sf_id, 'success',\r\n                                            'salesforce_to_odoo', f\"{len(res)} Attachment save for opportunity {rec.opp_name.name}\")\r\n        except Exception as e:\r\n            self.env['salesforce.sync.history'].create_log_param(\r\n                    'Opportunity', '', 'failed', 'salesforce_to_odoo',\r\n                    f\"Attachment fetching failed with error {str(e)}\")\r\n            _logger.info('Attachment fetching failed with %s', str(e))\r\n\r\n    def helper_fetch_sales_docs(self, records):\r\n        \"\"\"\r\n        This method is for helper cron job which will help calling in the main fetch cron\r\n        so that it can run again ,it is acting like a helper cron fetch job\r\n        \"\"\"\r\n        cron_record = self.env.ref('salesforce_connector.sf_ir_cron_sales_doc_fetch_process_1')\r\n        if cron_record:\r\n            next_exc_time = datetime.now() + timedelta(milliseconds=1)\r\n            cron_record.write({'nextcall': next_exc_time,\r\n                               'active': True,\r\n                               'numbercall': 1\r\n                               })\r\n            code_to_run = f\"model.get_sale_order_document(records={records})\"\r\n            cron_record.write({'code': code_to_run})\r\n\r\n    def helper_save_sales_docs(self, records):\r\n        \"\"\"\r\n        This method is for helper cron job which will help calling in the main save cron\r\n        so that it can run again ,it is acting like a helper cron job\r\n        \"\"\"\r\n        cron_record = self.env.ref('salesforce_connector.sf_ir_cron_sales_doc_save_process_1')\r\n        if cron_record and records:\r\n            next_exc_time = datetime.now() + timedelta(milliseconds=1)\r\n            cron_record.write({'nextcall': next_exc_time,\r\n                               'active': True,\r\n                               'numbercall': 1\r\n                               })\r\n            code_to_run = f\"model.save_sales_doc_attachments(records={records})\"\r\n            cron_record.write({'code': code_to_run})\r\n\r\n    def save_sales_doc_attachments(self, records=None):\r\n        try:\r\n            salesforce = self.env['salesforce.connector'].browse(1)\r\n            if not salesforce.sales_force:\r\n                salesforce.connect_to_salesforce()\r\n                #: create url for fetching the attachment\r\n            #: pop first batch of record ids from the batch of record ids\r\n            record_ids = records.pop()\r\n            sales_docs_urls = self.env['sales.docs.url'].browse(record_ids)\r\n            for sf_att_rec in sales_docs_urls:\r\n                #: get the related opportunity record for this sales doc url\r\n                opp_rec = sf_att_rec.ref_sales_doc_opp.opp_name\r\n                try:\r\n                    if sf_att_rec.type in ['application/pdf', 'pdf', 'PDF'] or sf_att_rec.title.find('.pdf') != -1 or sf_att_rec.title.find('.PDF') != -1:\r\n                        url = f\"https://{salesforce.sales_force.sf_instance}{sf_att_rec.name}\"\r\n                        #: get the response for the attachment\r\n                        file_response = salesforce.sales_force._call_salesforce('GET', url)\r\n                        if file_response.status_code == 200:\r\n                            base64_data = encodebytes(file_response.content)\r\n                            if base64_data:\r\n                                new_attachment = [{'name': sf_att_rec.title,\r\n                                                   'datas': base64_data,\r\n                                                   'res_model': 'crm.lead',\r\n                                                   'res_id': opp_rec.id}]\r\n\r\n                                res = self.env['ir.attachment'].create(new_attachment)\r\n                                if res:\r\n                                    _logger.info('Attachment saved from salesforce!!')\r\n                                    sf_att_rec.write({'attachment': [res.id], 'status': 'yes'})\r\n                                    self.env['salesforce.sync.history'].create_log_param(\r\n                                            'Opportunity', opp_rec.sf_id, 'success',\r\n                                            'salesforce_to_odoo',\r\n                                            f\"{len(res)} Attachment save for opportunity {opp_rec.name}\")\r\n                except Exception as e:\r\n                    self.env['salesforce.sync.history'].create_log_param(\r\n                            'Opportunity', opp_rec.sf_id, 'failed', 'salesforce_to_odoo',\r\n                            f\"Attachment saving failed for {opp_rec.name} with error {str(e)}\")\r\n\r\n            salesforce.env.cr.commit()\r\n        except Exception as e:\r\n            self.env['salesforce.sync.history'].create_log_param(\r\n                    'Opportunity', '', 'failed', 'salesforce_to_odoo',\r\n                    f\"Attachment saving failed with error {str(e)}\")\r\n            _logger.info('Attachment saving failed with %s', str(e))\r\n\r\n        finally:\r\n            cron_record = self.env.ref('salesforce_connector.sf_ir_cron_sales_doc_save_process_2')\r\n            if cron_record and records:\r\n                next_exc_time = datetime.now() + timedelta(milliseconds=1)\r\n                cron_record.write({'nextcall': next_exc_time,\r\n                                   'active': True,\r\n                                   'numbercall': 1\r\n                                   })\r\n                code_to_run = f\"model.helper_save_sales_docs(records={records})\"\r\n                cron_record.write({'code': code_to_run})\r\n            else:\r\n                # after saving them start mapping for sage sale orders\r\n                self.env.ref('salesforce_connector.sf_sync_record').start_for_sale_order_processing()\r\n                _logger.info('All sales url been processed!!')\r\n\r\n\r\nint_match_pattern = re.compile('\\d+')\r\n\r\n\r\nclass SalesDocsUrls(models.Model):\r\n    _name = 'sales.docs.url'\r\n    _description = 'Model for storing sales doc attachment url'\r\n\r\n    _rec_name = 'title'\r\n    name = fields.Char('Doc URL')\r\n    title = fields.Char('File Name')\r\n    type = fields.Char('Doc type')\r\n    ref_sales_doc_opp = fields.Many2one('opportunity.sales.docs', ondelete='cascade')\r\n    attachment = fields.Many2many('ir.attachment', ondelete='cascade')\r\n    record_type = fields.Selection([('Attachment', 'Attachment'), ('File', 'File')], string='Record Type')\r\n    status = fields.Selection([('yes', 'yes'), ('no', 'no')], default='no', string='Fetch Status')\r\n    rel_sale_order = fields.Many2one('sale.order', ondelete='cascade')\r\n    is_so_mapped = fields.Boolean(default=False)\r\n\r\n    def fetch_current_record_url(self):\r\n        try:\r\n            salesforce = self.env['salesforce.connector'].browse(1)\r\n            if not salesforce.sales_force:\r\n                salesforce.connect_to_salesforce()\r\n            for rec in self:\r\n                #: create url for fetching the attachment\r\n                if rec.name:\r\n                    url = f\"https://{salesforce.sales_force.sf_instance}{rec.name}\"\r\n                    #: get the response for the attachment\r\n                    file_response = salesforce.sales_force._call_salesforce('GET', url)\r\n                    if file_response.status_code == 200:\r\n                        base64_data = encodebytes(file_response.content)\r\n                        if base64_data:\r\n                            new_attachment = [{'name': rec.title,\r\n                                               'datas': base64_data,\r\n                                               'res_model': 'crm.lead',\r\n                                               'res_id': rec.ref_sales_doc_opp.opp_name.id}]\r\n\r\n                            res = self.env['ir.attachment'].create(new_attachment)\r\n                            if res:\r\n                                rec.write({'attachment': [res.id], 'status': 'yes'})\r\n                                self.env['salesforce.sync.history'].create_log_param(\r\n                                        'Opportunity', rec.ref_sales_doc_opp.opp_name.sf_id, 'success',\r\n                                        'salesforce_to_odoo',\r\n                                        f\"{len(res)} Attachment save for opportunity {rec.ref_sales_doc_opp.opp_name.name}\")\r\n        except Exception as e:\r\n            self.env['salesforce.sync.history'].create_log_param(\r\n                    'Opportunity', '', 'failed', 'salesforce_to_odoo',\r\n                    f\"Attachment saving failed with error {str(e)}\")\r\n            _logger.info('Attachment saving failed with %s', str(e))\r\n\r\n    def process_sale_order_file_name(self, records=None):\r\n        all_records = records.pop()\r\n        for rec_id in all_records:\r\n            rec = self.env['sales.docs.url'].browse([rec_id])\r\n            rec.map_file_to_sale_order()\r\n\r\n        cron_record = self.env.ref('salesforce_connector.sf_sale_order_opp_mapping_process_2')\r\n        if cron_record:\r\n            next_exc_time = datetime.now() + timedelta(milliseconds=1)\r\n            cron_record.write({'nextcall': next_exc_time,\r\n                               'active': True,\r\n                               'numbercall': 1\r\n                               })\r\n            code_to_run = f\"model.helper_process_sale_order_file_name(records={records})\"\r\n            cron_record.write({'code': code_to_run})\r\n\r\n    def map_file_to_sale_order(self):\r\n        rec = self\r\n        rec.rel_sale_order = False\r\n        # if the file name of the attachment starts with sales order and there is a related opportunity.sales.docs\r\n        if rec.title.lower().startswith('sales order') and rec.ref_sales_doc_opp:\r\n            # extract out the sale order number from file name\r\n            match_so_number = int_match_pattern.search(rec.title)\r\n            # if there is a match for a number pattern\r\n            if match_so_number:\r\n                # grab the first group\r\n                try:\r\n                    so_number = int(match_so_number.group(0))\r\n                    so_rec = self.env['ir.model.data'].search([('model', '=', 'sale.order'),\r\n                                                               ('module', '=', '__import__'),\r\n                                                               ('name', '=', so_number)], limit=1)\r\n                    if so_rec:\r\n                        _logger.info(f'{so_number} found in import records')\r\n                        rec.rel_sale_order = so_rec.res_id\r\n                        # correct duplicate order lines\r\n                        self.delete_duplicate_order_lines(rec.rel_sale_order)\r\n                        rec.rel_sale_order.with_context({'sage_data_processing': True,\r\n                                                         'tracking_disable': True}).opportunity_id = rec.ref_sales_doc_opp.opp_name.id\r\n                        _logger.info(f'new opportunity id linked to the imported sale order')\r\n                        self.get_product_from_sale_order(rec.rel_sale_order.opportunity_id, rec.rel_sale_order)\r\n                        # check for customer on sale order it might be wrong in some cases when there are similiar names\r\n                        if rec.rel_sale_order.partner_id.id != rec.rel_sale_order.opportunity_id.partner_id.id:\r\n                            rec.rel_sale_order.partner_id = rec.rel_sale_order.opportunity_id.partner_id.id\r\n                            # sage_data_processing: so that we can disable tracking when we are prcoessing sage sale orders\r\n                            rec.rel_sale_order.with_context(\r\n                                    {'sage_data_processing': True, 'tracking_disable': True}).onchange_partner_id()\r\n                        self.update_product_partner_id(rec.rel_sale_order)\r\n                        self.get_related_purchase_order(rec.rel_sale_order)\r\n                        rec.is_so_mapped = True\r\n                except ValueError as e:\r\n                    _logger.error(f'Error occurred during sale order attachment processing {str(e)}')\r\n\r\n\r\n    def helper_process_sale_order_file_name(self, records):\r\n        cron_record = self.env.ref('salesforce_connector.sf_sale_order_opp_mapping_process_1')\r\n        if cron_record and records:\r\n            next_exc_time = datetime.now() + timedelta(milliseconds=1)\r\n            cron_record.write({'nextcall': next_exc_time,\r\n                               'active': True,\r\n                               'numbercall': 1\r\n                               })\r\n            code_to_run = f\"model.process_sale_order_file_name(records={records})\"\r\n            cron_record.write({'code': code_to_run})\r\n\r\n    def update_product_partner_id(self, sale_order):\r\n        if sale_order:\r\n            this_order_products = sale_order.order_line.mapped('product_id')\r\n            for product in this_order_products:\r\n                product.product_partner_id = sale_order.opportunity_id.partner_id.id\r\n                _logger.info(f'Partner id changed for product {product.display_name}')\r\n\r\n    def get_related_purchase_order(self, sale_order):\r\n        if sale_order:\r\n            so_products = sale_order.order_line.mapped('product_id')\r\n            for product in so_products:\r\n                rel_po = self.env['purchase.order.line'].search([('product_id','=', product.id)], limit=1)\r\n                if rel_po and rel_po.order_id:\r\n                    rel_po.order_id.sale_ids = [(4, sale_order.id)]\r\n                    _logger.info(f'PO found for {sale_order.id}')\r\n\r\n    def get_product_from_sale_order(self, opportunity, sale_order):\r\n        \"\"\"\r\n        It returns the first of all board products found in the sale order\r\n        :param sale_order:\r\n        :param opportunity:\r\n        :return:\r\n        \"\"\"\r\n        if sale_order:\r\n            board_products_lines = sale_order.order_line.filtered(lambda line: line.ref_product_is_board)\r\n            if board_products_lines:\r\n                so_product = board_products_lines[0].product_id\r\n                opportunity.with_context({'sage_data_processing': True,'tracking_disable':True}).name = so_product.customer_part_number\r\n                opportunity.with_context({'sage_data_processing': True,'tracking_disable':True}).rev_code = so_product.customer_part_number_rev_code\r\n                opportunity.with_context({'sage_data_processing': True,'tracking_disable':True}).opportunity_product_template_id = so_product.product_tmpl_id.id\r\n\r\n    def delete_duplicate_order_lines(self, sale_order):\r\n        # key:product_id and value:{'qty': 10,'lead_time': '1 to 2 days'}\r\n        order_line_set = defaultdict(list)\r\n        order_lines_to_delete = []\r\n        for order_line in sale_order.order_line:\r\n            # if it is a new product store it as id: {qty:qty,lead_time:lead_time}\r\n            if order_line.product_id.id not in order_line_set:\r\n                order_line_set[order_line.product_id.id].append({'qty': order_line.product_uom_qty,\r\n                                                                 'lead_time': order_line.lead_time\r\n                                                                 })\r\n            else:\r\n                # if the order line has product_id that already existed in the order_line_set\r\n                # check the quantity and lead time, if its a match with already existing order line add it\r\n                # in the order_lines_to_delete list\r\n                existing_lines = order_line_set[order_line.product_id.id]\r\n                flag = False\r\n                for existing_line in existing_lines:\r\n                    if order_line.product_uom_qty == existing_line['qty'] and \\\r\n                            order_line.lead_time == existing_line['lead_time']:\r\n                        order_lines_to_delete.append(order_line.id)\r\n                        flag = True\r\n                        break\r\n\r\n                if not flag:\r\n                    order_line_set[order_line.product_id.id].append({'qty': order_line.product_uom_qty,\r\n                                                                     'lead_time': order_line.lead_time\r\n                                                                     })\r\n\r\n        if order_lines_to_delete:\r\n            _logger.info(f'Order lines deleted from {sale_order.id}-{sale_order.name}')\r\n            self.env['sale.order.line'].with_context({'sage_data_processing': True}).browse(order_lines_to_delete).unlink()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../salesforce_connector/models/salesforce_queue_jobs.py b/../salesforce_connector/models/salesforce_queue_jobs.py
--- a/../salesforce_connector/models/salesforce_queue_jobs.py	(revision 1d212c13d7678383144751f05cf4ef0c2c556b0b)
+++ b/../salesforce_connector/models/salesforce_queue_jobs.py	(date 1632729825465)
@@ -17,10 +17,7 @@
     _rec_name = 'sf_model'
     _order = 'id desc'
 
-    sf_model = fields.Selection([('Account', 'Account'), ('Contact', 'Contact'), ('Individual', 'Individual'),
-                                 ('PartnerNetworkConnection', 'PartnerNetworkConnection'), ('Rep__c', 'Rep__c'),
-                                 ('Pricebook2', 'Pricebook2'), ('Opportunity', 'Opportunity'),
-                                 ('Lead', 'Lead'), ('Task','Task')], string="Salesforce Model")
+    sf_model = fields.Char(string="Salesforce Model")
     odoo_model = fields.Many2one('ir.model', string="odoo Model")
     o_model = fields.Many2one('ir.model', string="o Model")
     from_date = fields.Datetime('From Date')
@@ -63,7 +60,9 @@
             _logger.info('New record in progress- id %s', record.id)
             # record.env.cr.commit()
             try:
+                print("Enter to try block=====>>")
                 total_records = salesforce.search_count(sf_model=record.sf_model, from_date=record.from_date, to_date=record.to_date)
+                print("Total records=======>>>",total_records)
                 # record.main_total_records = total_records
                 if total_records >= 2000:
                     previous_time_segment_records = total_records
@@ -109,6 +108,7 @@
 
                 # if record_count is zero then no need to use that record
                 if record.record_count == 0:
+                    print("Record count 0=======>>>",record.record_count)
                     # record.state = 'done'
                     record.write({'state': 'done'})
                     record.import_status = 'imported'
@@ -484,10 +484,10 @@
 
     def left_for_attachment(self):
         # total salesforce opportunities
-        total_saleforce_opps = self.env['crm.lead'].search([('type', '=', 'opportunity'), ('sf_id', '!=', False)])
+        total_saleforce_opps = self.env['crm.lead'].search([('type', '=', 'opportunity')]) #, ('sf_id', '!=', False)
         # ('sales_import_status', '=', 'not_imported')
-        not_processes_ones = total_saleforce_opps.filtered(lambda opp: opp.sales_import_status == 'not_imported')
-        self.sale_attachments_left = f'{len(not_processes_ones)} out of {len(total_saleforce_opps)}'
+        # not_processes_ones = total_saleforce_opps.filtered(lambda opp: opp.sales_import_status == 'not_imported')
+        self.sale_attachments_left = False #f'{len(not_processes_ones)} out of {len(total_saleforce_opps)}'
 
     def tasks_left_for_conversion(self):
         all_salesforce_tasks = self.env['salesforce.tasks'].search([('what_Type', '!=', False)])
@@ -708,8 +708,7 @@
             cron_record.write({'code': code_to_run})
 
     def start_fetching_records_for_attachments(self):
-        opp_s = self.env['crm.lead'].search([('type', '=', 'opportunity'), ('sf_id', '!=', False),
-                                             ('sales_import_status', '=', 'not_imported')])
+        opp_s = self.env['crm.lead'].search([('type', '=', 'opportunity')]) #,('sales_import_status', '=', 'not_imported'), ('sf_id', '!=', False)
         all_records = []
         all_opp_s = opp_s.ids
         n = self.max_rec_to_fetch
@@ -1020,7 +1019,7 @@
                                 all_urls.append((0, 0, new_att_record))
 
                 if all_urls:
-                    opp_id = self.env['crm.lead'].search([('sf_id', '=', sf_id)], limit=1)
+                    opp_id = self.env['crm.lead'].search([], limit=1) #('sf_id', '=', sf_id)
                     sale_doc_url = {'opp_name': opp_id.id,
                                     'is_attachments': True,
                                     'all_urls': all_urls
@@ -1083,56 +1082,56 @@
                     else:
                         _logger.info(f'Attachment record saved failed for sf_id {sf_id} ')
 
-    def get_sale_order_document(self, records=None):
-        salesforce = self.env['salesforce.connector'].browse(1)
-        if not salesforce.sales_force:
-            salesforce.connect_to_salesforce()
-        if salesforce.sales_force and records:
-            record_ids = records.pop()
-            sales_job_record = self.env['crm.lead'].browse(record_ids)
-            # fetching the sales docs based on the salesforce id and not part number
-            all_sf_ids = [sf_rec.sf_id for sf_rec in sales_job_record]
-            if all_sf_ids:
-                try:
-                    query = "SELECT (SELECT Id,ParentId,Title,RecordType FROM CombinedAttachments where ParentId in {opp_id})" \
-                            " FROM Opportunity WHERE Id in {opp_id}".format(opp_id=tuple(all_sf_ids))
-                    #: All CombinedAttachments records
-                    com_att_records = salesforce.sales_force.query_all(query)['records']
-                    for rec in com_att_records:
-                        if rec.get('CombinedAttachments', False):
-                            attachments = rec['CombinedAttachments'].get('records')
-                            attachment_ids = [at_rec['Id'] for at_rec in attachments if
-                                              at_rec.get('RecordType') == 'Attachment']
-
-                            file_ids = [at_rec['Id'] for at_rec in attachments if
-                                        at_rec.get('RecordType') == 'File']
-                            if attachment_ids:
-                                self.fetch_record_type_attachment(salesforce, attachment_ids)
-                            if file_ids:
-                                opp_parent_id = attachments[0].get('ParentId', False)
-                                self.fetch_record_type_file(salesforce, file_ids, opp_parent_id)
-                    salesforce.env.cr.commit()
-
-                except Exception as e:
-                    sales_job_record.env.cr.rollback()
-                    self.env['salesforce.sync.history'].create_log_param(
-                            'Opportunity', '', 'failed', 'salesforce_to_odoo',
-                            f"Attachment fetching failed with error {str(e)}")
-                finally:
-                    # call the helper cron job to start this job again if records are still remaining
-                    cron_record = self.env.ref('salesforce_connector.sf_ir_cron_sales_doc_fetch_process_2')
-                    if cron_record and records:
-                        next_exc_time = datetime.now() + timedelta(milliseconds=1)
-                        cron_record.write({'nextcall': next_exc_time,
-                                           'active': True,
-                                           'numbercall': 1
-                                           })
-                        code_to_run = f"model.helper_fetch_sales_docs(records={records})"
-                        cron_record.write({'code': code_to_run})
-                    else:
-                        # after fetching all the records start saving them too
-                        self.env.ref('salesforce_connector.sf_sync_record').start_saving_sales_docs_urls()
-                        _logger.info('All fetching of sales docs of opportunity been done!!')
+    # def get_sale_order_document(self, records=None):
+    #     salesforce = self.env['salesforce.connector'].browse(1)
+    #     if not salesforce.sales_force:
+    #         salesforce.connect_to_salesforce()
+    #     if salesforce.sales_force and records:
+    #         record_ids = records.pop()
+    #         sales_job_record = self.env['crm.lead'].browse(record_ids)
+    #         # fetching the sales docs based on the salesforce id and not part number
+    #         all_sf_ids = [sf_rec.sf_id for sf_rec in sales_job_record]
+    #         if all_sf_ids:
+    #             try:
+    #                 query = "SELECT (SELECT Id,ParentId,Title,RecordType FROM CombinedAttachments where ParentId in {opp_id})" \
+    #                         " FROM Opportunity WHERE Id in {opp_id}".format(opp_id=tuple(all_sf_ids))
+    #                 #: All CombinedAttachments records
+    #                 com_att_records = salesforce.sales_force.query_all(query)['records']
+    #                 for rec in com_att_records:
+    #                     if rec.get('CombinedAttachments', False):
+    #                         attachments = rec['CombinedAttachments'].get('records')
+    #                         attachment_ids = [at_rec['Id'] for at_rec in attachments if
+    #                                           at_rec.get('RecordType') == 'Attachment']
+    #
+    #                         file_ids = [at_rec['Id'] for at_rec in attachments if
+    #                                     at_rec.get('RecordType') == 'File']
+    #                         if attachment_ids:
+    #                             self.fetch_record_type_attachment(salesforce, attachment_ids)
+    #                         if file_ids:
+    #                             opp_parent_id = attachments[0].get('ParentId', False)
+    #                             self.fetch_record_type_file(salesforce, file_ids, opp_parent_id)
+    #                 salesforce.env.cr.commit()
+    #
+    #             except Exception as e:
+    #                 sales_job_record.env.cr.rollback()
+    #                 self.env['salesforce.sync.history'].create_log_param(
+    #                         'Opportunity', '', 'failed', 'salesforce_to_odoo',
+    #                         f"Attachment fetching failed with error {str(e)}")
+    #             finally:
+    #                 # call the helper cron job to start this job again if records are still remaining
+    #                 cron_record = self.env.ref('salesforce_connector.sf_ir_cron_sales_doc_fetch_process_2')
+    #                 if cron_record and records:
+    #                     next_exc_time = datetime.now() + timedelta(milliseconds=1)
+    #                     cron_record.write({'nextcall': next_exc_time,
+    #                                        'active': True,
+    #                                        'numbercall': 1
+    #                                        })
+    #                     code_to_run = f"model.helper_fetch_sales_docs(records={records})"
+    #                     cron_record.write({'code': code_to_run})
+    #                 else:
+    #                     # after fetching all the records start saving them too
+    #                     self.env.ref('salesforce_connector.sf_sync_record').start_saving_sales_docs_urls()
+    #                     _logger.info('All fetching of sales docs of opportunity been done!!')
 
     def fetch_current_record_attachments(self):
         try:
Index: ../salesforce_connector/models/salesforce_importer.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from odoo import models, fields, api, _\r\nfrom simple_salesforce import Salesforce\r\nfrom odoo.exceptions import Warning\r\nfrom datetime import datetime\r\nfrom dateutil.rrule import rrule, DAILY\r\nfrom dateutil.parser import parse\r\nfrom dateutil.relativedelta import *\r\nfrom odoo.exceptions import ValidationError, RedirectWarning, UserError\r\nimport logging\r\nimport re\r\n\r\n_logger = logging.getLogger(__name__)\r\n\r\n\r\nclass SalesForceImporter(models.Model):\r\n\r\n    _name = 'salesforce.connector'\r\n    _rec_name = 'field_name'\r\n    _description = \"Salesforce Connector\"\r\n\r\n    sales_force = None\r\n    field_name = fields.Char('salesforce_connector')\r\n    include_custm = fields.Boolean('Include Custom Fields')\r\n    max_rec_per_job = fields.Integer('Maximum Record Per JOB', default=100)\r\n    accounts = fields.Boolean('Import Accounts')\r\n    contacts = fields.Boolean('Import Contacts')\r\n    individuals = fields.Boolean('Import Individuals')\r\n    partner_ntwrk_con = fields.Boolean('Import Partner Network Connection')\r\n    pricebook = fields.Boolean('Import Pricebook')\r\n    rep__c = fields.Boolean('Import Rep__c')\r\n    leads = fields.Boolean('Import Leads')\r\n    opportunities = fields.Boolean('Import Opportunities')\r\n    sales_orders = fields.Boolean('Import Sale Orders')\r\n    tasks = fields.Boolean('Import Tasks')\r\n    geographic_scope = fields.Boolean('Import Geographic Scope')\r\n    products = fields.Boolean('Export Products')\r\n    from_date = fields.Date('From Date', compute=\"_compute_date\", store=True, required=True,\r\n                            default=fields.Date.today() + relativedelta(days=-7))\r\n    to_date = fields.Date('To Date', compute=\"_compute_date\", store=True, required=True, default=fields.Date.today())\r\n    last_sync_date = fields.Date('Last Sync Date', readonly=True)\r\n    last_daily_sync_date = fields.Date(default=fields.Date.today() + relativedelta(days=-7))\r\n\r\n    _sql_constraints = [\r\n        ('check_max_rec_per_job', 'CHECK(max_rec_per_job <= 1000 AND max_rec_per_job > 0)',\r\n         'Maximum Record Per JOB must be between 1 and 1000'),\r\n    ]\r\n\r\n    @api.depends('last_sync_date')\r\n    def _compute_date(self):\r\n        if self.last_sync_date:\r\n            self.from_date = self.last_sync_date\r\n            self.to_date = self.last_sync_date + relativedelta(days=+7)\r\n        else:\r\n            self.to_date = fields.Date.today()\r\n            self.from_date = fields.Date.today() + relativedelta(days=-7)\r\n\r\n    @api.onchange('from_date', 'to_date')\r\n    def _validate_range_date(self):\r\n        if self.from_date and self.to_date:\r\n            if self.from_date > self.to_date or self.from_date == self.to_date:\r\n                raise ValidationError(_('Date must be in valid range.!!'))\r\n\r\n    def sync_salesforce_daily(self, **kwargs):\r\n        \"\"\"\r\n        This method runs by the cron to create job queues for the salesforce models\r\n        ,it will take the models from the form ,the checkboxes that are already ticked\r\n        :param kwargs:\r\n        :return:\r\n        \"\"\"\r\n        salesforce = self.search([], limit=1)\r\n        salesforce.from_date = salesforce.last_daily_sync_date\r\n        salesforce.to_date = salesforce.from_date + relativedelta(days=1)\r\n        salesforce.last_daily_sync_date = salesforce.to_date\r\n        salesforce.sync_data()\r\n        # run the method to convert salesforce tasks to activities, just to nake sure that they convert every time\r\n        # the daily cron job runs\r\n        # self.env.ref('salesforce_connector.sf_sync_record').start_convert_task_to_activities()\r\n        # self.env.ref('salesforce_connector.sf_sync_record').start_saving_sales_docs_urls()\r\n\r\n\r\n    def sync_data(self):\r\n        \"\"\"\r\n        this function checks the user selection for import data and on the basis of this \r\n        selection it call create_job_queues function\r\n\r\n        :return:\r\n        \"\"\"\r\n        if self.accounts or self.products or self.sales_orders or self.opportunities or self.contacts or \\\r\n                self.individuals or self.partner_ntwrk_con or self.pricebook or self.rep__c or self.leads or self.tasks or self.geographic_scope:\r\n            self.create_job_queues()\r\n        else:\r\n            raise Warning(_(\"No Option Checked.\",))\r\n\r\n    def connect_to_salesforce(self):\r\n        \"\"\"\r\n        test user connection\r\n\r\n        \"\"\"\r\n        try:\r\n            username = self.env['ir.config_parameter'].sudo().get_param('sf_username')\r\n            password = self.env['ir.config_parameter'].sudo().get_param('sf_password')\r\n            sf_organization = self.env['ir.config_parameter'].sudo().get_param('organization_id')\r\n            sf_domain = self.env['ir.config_parameter'].sudo().get_param('sf_domain')\r\n            version = self.env['ir.config_parameter'].sudo().get_param('version')\r\n\r\n            type(self).sales_force = Salesforce(username=username,\r\n                                            password=password,\r\n                                            organizationId=sf_organization,\r\n                                            domain=sf_domain,\r\n                                            version=version)\r\n            print(self.sales_force)\r\n        except Exception as e:\r\n            Warning(_(str(e)))\r\n\r\n    # def get_image(self):\r\n    #     self.env['sf.queue.jobs'].get_account_records_image()\r\n\r\n    def create_job_queues(self):\r\n        \"\"\"This creates job queues to import data from SalesForce\r\n        :return: N/A\r\n        \"\"\"\r\n        self.connect_to_salesforce()\r\n        if self.sales_force is None:\r\n            raise Warning(_(\"Kindly provide SalesForce Credentials for odoo user\",))\r\n        if self.leads:\r\n            self._add_records_to_queue('Lead', 'crm.lead', self.from_date, self.to_date, self.include_custm,\r\n                                       self.max_rec_per_job)\r\n        if self.opportunities:\r\n            self._add_records_to_queue('Opportunity', 'crm.lead', self.from_date, self.to_date, self.include_custm,\r\n                                       self.max_rec_per_job)\r\n        if self.rep__c:\r\n            self._add_records_to_queue('Rep__c', 'sf.rep__c', self.from_date, self.to_date, self.include_custm,\r\n                                       self.max_rec_per_job)\r\n        if self.pricebook:\r\n            self._add_records_to_queue('Pricebook2', 'sf.pricebook', self.from_date, self.to_date, self.include_custm,\r\n                                       self.max_rec_per_job)\r\n        if self.partner_ntwrk_con:\r\n            self._add_records_to_queue('PartnerNetworkConnection', 'sf.pnc', self.from_date, self.to_date,\r\n                                       self.include_custm, self.max_rec_per_job)\r\n        if self.individuals:\r\n            self._add_records_to_queue('Individual', 'res.partner', self.from_date, self.to_date, self.include_custm,\r\n                                       self.max_rec_per_job)\r\n        if self.contacts:\r\n            self._add_records_to_queue('Contact', 'res.partner', self.from_date, self.to_date, self.include_custm,\r\n                                       self.max_rec_per_job)\r\n        if self.accounts:\r\n            self._add_records_to_queue('Account', 'res.partner', self.from_date, self.to_date, self.include_custm,\r\n                                       self.max_rec_per_job)\r\n        if self.tasks:\r\n            self._add_records_to_queue('Task', 'salesforce.tasks', self.from_date, self.to_date, self.include_custm,\r\n                                       self.max_rec_per_job)\r\n\r\n        if self.geographic_scope:\r\n            self._add_records_to_queue('Scopes', 'model_geographic_scope', self.from_date, self.to_date, self.include_custm,\r\n                                       self.max_rec_per_job)\r\n\r\n        if self.sales_orders:\r\n            # data_dictionary[\"sales_orders\"] = self.import_sale_orders()\r\n            self.import_sale_orders()\r\n\r\n        # if self.products:\r\n        #     self.export_products()\r\n\r\n        # Process the cron\r\n        cron_record = self.env.ref('salesforce_connector.sf_ir_cron_job_process')\r\n        if cron_record:\r\n            next_exc_time = datetime.now()\r\n            cron_record.sudo().write({'nextcall': next_exc_time,\r\n                                      'active': True,\r\n                                      'numbercall': 1\r\n                                      })\r\n            cron_record.sudo().write({'code':'model.process_queue_jobs(for_new=True)'})\r\n\r\n    def _add_records_to_queue(self, sf_model, odoo_model, from_date, to_date, include_custm, max_rec_per_job):\r\n        vals = []\r\n        for dt in rrule(DAILY, dtstart=from_date, until=to_date):\r\n            if dt.date() != to_date:\r\n                nxt_date = dt + relativedelta(days=+1)\r\n                model = self.env['ir.model'].search([('model', '=', odoo_model)])\r\n                data = {\r\n                        'from_date': dt,\r\n                        'odoo_model': model.id,\r\n                        'state': 'new',\r\n                        'import_status': 'not_imported',\r\n                        'to_date': nxt_date,\r\n                        'sf_model': sf_model,\r\n                        'include_custm': include_custm,\r\n                        'max_rec_per_job': max_rec_per_job\r\n                }\r\n                vals.append(data)\r\n        if vals:\r\n            self.env['sf.queue.jobs'].create(vals)\r\n        self.env['salesforce.sync.history'].create_log_param(sf_model, '', 'success', 'salesforce_to_odoo',\r\n                                                             sf_model + ' value has been successfully added to queue')\r\n\r\n    def search_count(self, sf_model, from_date=False, to_date=False):\r\n        if not self.sales_force:\r\n            self.connect_to_salesforce()\r\n        query = \"SELECT COUNT(Id) FROM {sf_model} where LastModifiedDate > {from_date} and LastModifiedDate < {to_date}\".format\\\r\n            (sf_model=sf_model,from_date=from_date.strftime('%Y-%m-%dT%H:%M:%SZ'), to_date=to_date.strftime('%Y-%m-%dT%H:%M:%SZ'))\r\n        records = self.sales_force.query_all(query)['records']\r\n        print('total records are ', records[0].get('expr0'))\r\n        return records[0].get('expr0')\r\n\r\n    def _query_to_salesforce(self, model, sf_model, record_id=False, from_date=False, to_date=False, include_custom=False, offset=False, limit=False):\r\n        self.connect_to_salesforce()\r\n        records = []\r\n        query_fields = self._get_sales_force_query_fields(model, sf_model, include_custom)\r\n        if query_fields:\r\n            query = \"SELECT {query_fields} FROM {sf_model} %s\".format(query_fields=query_fields,\r\n                                                                   sf_model=sf_model)\r\n            extend_query = ''\r\n            if record_id:\r\n                extend_query = \"where id='%s'\" % record_id\r\n            if from_date and to_date and not record_id:\r\n                extend_query = \"where LastModifiedDate > %s and LastModifiedDate < %s\" % (from_date.strftime('%Y-%m-%dT%H:%M:%SZ'), to_date.strftime('%Y-%m-%dT%H:%M:%SZ'))\r\n            if limit > 0:\r\n                extend_query += ' LIMIT {limit}'.format(limit=limit)\r\n                if offset:\r\n                    extend_query += ' OFFSET {offset}'.format(offset=offset)\r\n            records = self.sales_force.query_all(query % extend_query)[\"records\"]\r\n        return records\r\n\r\n    def _get_sales_force_query_fields(self, o_model, sf_model, include_custom):\r\n        query = \"\"\"SELECT sf_field from sf_columns_mapping\r\n                    WHERE o_model = {o_model}\r\n                    AND sf_model = '{sf_model}'\r\n                    AND sf_model is not NULL\r\n                    AND o_model is not NULL\r\n                    AND query_field = true\r\n                    AND sf_field is not NULL\"\"\".format(o_model=o_model.id,\r\n                                                      sf_model=sf_model)\r\n        final_query = query if include_custom else query + \"\"\" AND sf_field NOT LIKE '%__c'\"\"\"\r\n\r\n        self.env.cr.execute(final_query)\r\n        valid_records = self.env.cr.dictfetchall()\r\n        # Provide unique salesforce columns\r\n        fields_list = list(set([rec.get('sf_field') for rec in valid_records]))\r\n        sf_fields = ', '.join(fields_list)\r\n        return sf_fields\r\n\r\n    #: Get Name, Email, username and id of a salesforce user\r\n    def get_salesforce_user_info(self):\r\n        self.env['sf.queue.jobs'].update_fields_on_records('crm.lead', 'Lead')\r\n\r\n    def get_user_info(self, salesforce_user_ids=None):\r\n        if not self.sales_force:\r\n            self.connect_to_salesforce()\r\n\r\n        query = \"SELECT Name,Email,Username,Id,IsActive FROM User WHERE Id in {Id} and Email like '%@mclpcb.com'\". \\\r\n            format(Id=salesforce_user_ids)\r\n        if len(salesforce_user_ids) == 1:\r\n            query = \"SELECT Name,Email,Username,Id,IsActive FROM User WHERE Id = '{Id}' and Email like '%@mclpcb.com'\". \\\r\n            format(Id=salesforce_user_ids[0])\r\n\r\n        records = self.sales_force.query_all(query)['records']\r\n        # print('total users are ', records[0].get('expr0'))\r\n        return records\r\n\r\n    def _prepare_create_data(self, sf_data, odoo_model, sf_model):\r\n        create_data = {}\r\n        _logger.info('Record started creating')\r\n        # if the sf_model type is lead then\r\n        if sf_model == 'Lead':\r\n            #: if the is_converted is true means it is already converted into opportunity\r\n            #: So no need to make a lead record for it because lead/opportunity is same relation in odoo\r\n\r\n            if sf_data.get('IsConverted', False):\r\n                self.env['salesforce.sync.history'].create_log_param(\r\n                    sf_model, '', 'success',\r\n                    'salesforce_to_odoo',\r\n                    sf_model + f\" with {sf_data.get('Id', '')} Id is already an opportunity\")\r\n                _logger.info('Lead with %s sf_id is already a opportunity', sf_data.get('Id', ''))\r\n                return {'__not_needed_record': True}\r\n\r\n            #: check if this lead is converted to opportunity in odoo\r\n            is_lead_converted_to_opportunity = self.env['crm.lead'].search([\r\n                ('sf_id', '=', sf_data.get('Id')), ('type', '=', 'opportunity')])\r\n\r\n            #: if lead is converted to opportunity in odoo then skip this id\r\n            if is_lead_converted_to_opportunity:\r\n                self.env['salesforce.sync.history'].create_log_param(\r\n                    sf_model, '', 'success',\r\n                    'salesforce_to_odoo',\r\n                    sf_model + f\" with {sf_data.get('Id', '')} Id is converted to an opportunity in odoo\")\r\n                _logger.info('Lead with %s sf_id is converted to an opportunity', sf_data.get('Id', ''))\r\n                return {'__not_needed_record': True}\r\n\r\n            create_data['type'] = 'lead'\r\n            if 'Address' in sf_data:\r\n                address_data = self.create_address_data(None, sf_data['Address'])\r\n                if address_data:\r\n                    address_data = address_data[2]\r\n                    create_data['zip'] = address_data['zip']\r\n                    create_data['city'] = address_data['city']\r\n                    create_data['street'] = address_data['street']\r\n                    create_data['country_id'] = address_data['country_id']\r\n                    create_data['state_id'] = address_data['state_id']\r\n                    del sf_data['Address']\r\n\r\n            #: concatenate FirstName and LastName for lead contact_name\r\n            contact_name = ''\r\n            if 'FirstName' in sf_data and sf_data['FirstName']:\r\n                contact_name = f\"{sf_data['FirstName']}\"\r\n                del sf_data['FirstName']\r\n\r\n            if 'LastName' in sf_data and sf_data['LastName']:\r\n                contact_name = f\"{contact_name} {sf_data['LastName']}\"\r\n                del sf_data['LastName']\r\n\r\n            create_data['contact_name'] = contact_name\r\n\r\n            # description = ''\r\n            # #: concatenate description and comment for lead internal notes\r\n            # if 'Description' in sf_data and sf_data['Description']:\r\n            #     description = f\"{sf_data['Description']}\"\r\n            #     # del sf_data['Description']\r\n            #\r\n            # if 'Comments__c' in sf_data and sf_data['Comments__c']:\r\n            #     description = f\"{description}  \" \\\r\n            #                   f\"{sf_data['Comments__c']}\"\r\n            #     # del sf_data['Comments__c']\r\n            #\r\n            # create_data['description'] = description\r\n\r\n            #: if company name don't exist then we will enter n/a cause its required\r\n            if not sf_data.get('Company', False):\r\n                create_data['name'] = 'n/a'\r\n                # del sf_data['Company']\r\n            else:\r\n                create_data['name'] = sf_data.get('Company', 'n/a')\r\n                # del sf_data['Company']\r\n\r\n        for rec in sf_data:\r\n            sf_field = self.env['sf.columns.mapping'].search([('o_model', '=', odoo_model.model),\r\n                                                              ('sf_model', '=', sf_model),\r\n                                                              ('sf_field', '=', rec)], limit=1)\r\n            odoo_field = sf_field.odoo_field\r\n            if sf_field and odoo_field and sf_data[rec]:\r\n                value = self._create_fields_data(sf_data[rec], odoo_field, odoo_model, sf_model,\r\n                                                 sf_field, sf_field.sf_relational_model)\r\n                if value or odoo_field.ttype == 'boolean':\r\n                    if odoo_field.ttype == 'one2many':\r\n                        # only billing and shipping address is one2many\r\n                        if 'sf_country_name' not in create_data and value[0][2]['type'] in ['other', 'delivery', 'invoice']:\r\n                            create_data['sf_country_name'] = sf_data[rec]['country']  # get the sf_country_name for mapping\r\n                            create_data['sf_state'] = sf_data[rec]['state']  # get the sf_state name for mapping\r\n\r\n                        if odoo_field.name in create_data:\r\n                            create_data[odoo_field.name].append(value[0])\r\n\r\n                        else:\r\n                            create_data[odoo_field.name] = value\r\n\r\n                    elif odoo_field.ttype == 'many2one':\r\n                        if odoo_field.name == 'stage_id':\r\n                            create_data[odoo_field.name] = value[0]# stage id\r\n                            create_data['sf_stage_name'] = value[1] # sf stage name\r\n                        else:\r\n                            if odoo_field.name == 'sf_related_account_id':\r\n                                # for contacts,only id for parent_id so that contact\r\n                                # can connect to their respective company\r\n                                create_data['parent_id'] = value\r\n                            elif odoo_field.name == 'RFQ_type':\r\n                                create_data['RFQ_type'] = value\r\n\r\n                            # if no sf_related_account_id means no parent id\r\n                            create_data[odoo_field.name] = value\r\n                    else:\r\n                        if sf_model == 'Opportunity' and odoo_field.name == 'name':\r\n                            create_data[odoo_field.name] = value[0]\r\n                            create_data['rev_code'] = value[1]\r\n\r\n                        else:\r\n                            create_data[odoo_field.name] = value\r\n\r\n        _logger.info('Salesforce Record been created')\r\n        return create_data\r\n\r\n    def _create_fields_data(self, value, odoo_field, odoo_model, sf_model, sf_field, sf_relational_model):\r\n        if not sf_field.type == 'Lookup':\r\n            if odoo_field.ttype == 'date' and value:\r\n                return parse(value)\r\n\r\n            elif odoo_field.ttype == 'datetime' and value:\r\n                date = str(parse(value))\r\n                return datetime.strptime(date.split('+')[0], \"%Y-%m-%d %H:%M:%S\")\r\n\r\n            elif odoo_field.ttype == 'many2one':\r\n                # we first check the salesforce stage name in stage mapping\r\n                # and search for related crm stage name if any\r\n                # if found then return that stage_id otherwise\r\n                # create new stage and return that new stage_id\r\n                if odoo_field.name == 'stage_id':\r\n                    sf_mapped_stage = self.env['sf.stages.mapping'].search([(\"sf_stage_name\", \"=\", value)])\r\n\r\n                    if sf_mapped_stage:\r\n                        return ( sf_mapped_stage.sf_crm_stage.id, value)\r\n\r\n                    else:\r\n                        odoo_stage = self.env['crm.stage'].search( [(\"name\", \"=\", value)] )\r\n                        if not odoo_stage:\r\n                            odoo_stage = self.env[\"crm.stage\"].create( {\r\n                                \"name\": value\r\n                            })\r\n                        return (odoo_stage.id, value)\r\n\r\n                elif odoo_field.name == 'RFQ_type':\r\n                    quote_type = self.env['sf.quote.type.map'].search([(\"quote_type_name\", \"=\", value)])\r\n                    if not quote_type:\r\n                        quote_type = self.env['sf.quote.type.map'].create(\r\n                            {'quote_type_name': value})\r\n\r\n                    return quote_type.id\r\n\r\n                elif sf_relational_model:\r\n                    return self._update_many2one_field(value, sf_relational_model)\r\n                else:\r\n                    try:\r\n                        many2one_record = self.env[odoo_field.relation].search([('name', '=', value)], limit=1)\r\n                        if not many2one_record:\r\n                            res = self.env[odoo_field.relation].create({'name': value})\r\n                            if res:\r\n                                return res.id\r\n                            else:\r\n                                return None\r\n                        return many2one_record.id\r\n\r\n                    except Exception as e:\r\n                        _logger.info('%s Error occurred in many2one mapping', e)\r\n                        return None\r\n\r\n            elif odoo_field.ttype == 'one2many':\r\n                data =[]\r\n                if sf_field.sf_field in ['BillingAddress', 'OtherAddress', 'MailingAddress', 'ShippingAddress']:\r\n                    if sf_field.sf_field in ['OtherAddress', 'MailingAddress']:\r\n                        type = 'other'\r\n                    elif sf_field.sf_field == 'BillingAddress':\r\n                        type = 'invoice'\r\n                    elif sf_field.sf_field == 'ShippingAddress':\r\n                        type = 'delivery'\r\n                    data.append(self.create_address_data(type, value))\r\n                    return data\r\n                else:\r\n                    pass\r\n\r\n            elif odoo_field.ttype == 'many2many':\r\n                pass\r\n\r\n            elif sf_model == 'Opportunity' and odoo_field.name == 'name':\r\n                customer_part_number = re.split('Rev|rev|REV', value, 1)\r\n                rev_code = ''\r\n                if len(customer_part_number) == 2:\r\n                    rev_code = customer_part_number[1].strip()\r\n                    return customer_part_number[0].strip('-| '), rev_code\r\n\r\n                return value, rev_code\r\n\r\n            elif odoo_field.ttype == 'selection':\r\n                try:\r\n                    # Fixme: in case company business type is related field on res.partner\r\n                    # then it won't get updated in opportunity but if the res.partner get updated then\r\n                    # it will also get the value then\r\n                    for selection_field in odoo_field.selection_ids:\r\n                        if value.lower() == selection_field.name.lower():\r\n                            return selection_field.name\r\n                    _logger.info('%s Selection field do not match any value,value is %s', odoo_field.name, value)\r\n                    return ''\r\n                except Exception as e:\r\n                    _logger.info(f'Error occur during selection field matching ,{str(e)}')\r\n                    self.env['salesforce.sync.history'].create_log_param(\r\n                            sf_model, '', 'failed',\r\n                            'salesforce_to_odoo',\r\n                            sf_model + ' With error ' + str(e))\r\n                    return  ''\r\n            else:\r\n                return value\r\n\r\n        else:\r\n            if sf_field.type == 'Lookup' and isinstance(value, dict):\r\n                odoo_field_name = odoo_field.name\r\n                sf_field_name = odoo_field_name.split('_')[1]\r\n                return value.get(sf_field_name, '')\r\n\r\n\r\n    def create_address_data(self, address_type, address):\r\n        data = {}\r\n        if address:\r\n            data[\"street\"] = address[\"street\"] if address[\"street\"] else \"\"\r\n            data[\"city\"] = address[\"city\"] if address[\"city\"] else \"\"\r\n            data[\"zip\"] = address[\"postalCode\"] if address[\"postalCode\"] else \"\"\r\n            data[\"type\"] = address_type\r\n\r\n            state = country = None\r\n\r\n            if address['country'] is not None:\r\n                countries = self.env['sf.country.map'].search([('sf_country_name', 'ilike', address['country'])])\r\n                for matched_country in countries:\r\n                    if matched_country.sf_country_name.lower() == address['country'].lower():\r\n                        country = matched_country.sf_our_matched_country\r\n                        break\r\n\r\n                if not country:\r\n                    countries = self.env['res.country'].search([('name', 'ilike', address['country'])])\r\n                    for matched_country in countries:\r\n                        if matched_country.name.lower() == address['country'].lower():\r\n                            country = matched_country\r\n                            break\r\n\r\n            if address['state'] is not None:\r\n                states = self.env['sf.state.map'].search([('sf_state_name', 'ilike', address['state'])])\r\n                for matched_states in states:\r\n                    if matched_states.sf_state_name.lower() == address['state'].lower():\r\n                        state = matched_states.sf_our_matched_state\r\n                        break\r\n\r\n                if not state:\r\n                    states = self.env['res.country.state'].search( [('name', 'ilike', address['state'])])\r\n                    for matched_states in states:\r\n                        if matched_states.name.lower() == address['state'].lower():\r\n                            state = matched_states\r\n                            break\r\n\r\n                    if not state:\r\n                        states = self.env['res.country.state'].search([('code', 'ilike', address['state'])])\r\n                        for matched_states in states:\r\n                            if matched_states.code.lower() == address['state'].lower():\r\n                                if country is not None and matched_states.country_id.id == country.id:\r\n                                    state = matched_states\r\n                                    break\r\n\r\n            if country is None or ( country and address['country'].lower() != country.name.lower() ):\r\n                if state:\r\n                    country = state.country_id\r\n\r\n            data[\"country_id\"] = country.id if country else None # if nothing found need to put 1 first country\r\n            data[\"state_id\"] = state.id if state else None\r\n            if address['country'] is not None:\r\n                data['sf_country_name'] = address['country']\r\n\r\n            if address['state'] is not None:\r\n                data['sf_state'] = address['state']\r\n\r\n            return (0, 0, data)\r\n\r\n    def _update_many2one_field(self, value, sf_relational_model):\r\n        odoo_model = self._check_if_mapping_exist(sf_relational_model)\r\n        if odoo_model:\r\n            record_exist = self._check_existing_value(value, odoo_model.o_model.model, sf_relational_model)\r\n            if record_exist:\r\n                return record_exist.id\r\n            else:\r\n                record = self._query_to_salesforce(odoo_model.o_model, sf_relational_model, value)\r\n                if sf_relational_model in ['Account', 'Contact', 'Individual']:\r\n                    if sf_relational_model == 'Account':\r\n                        id_field = 'sf_account_id'\r\n                    elif sf_relational_model == 'Contact':\r\n                        id_field = 'sf_contact_id'\r\n                    else: \r\n                        id_field = 'sf_individual_id'\r\n                else:\r\n                    id_field = 'sf_id'\r\n                json_data = {id_field: record[0]['Id'], 'name': record[0]['Name']}\r\n                created_record = self.env[odoo_model.o_model.model].create(json_data)\r\n                self.env['salesforce.sync.history'].create_log_param(sf_relational_model, json_data.get(id_field), 'success',\r\n                                                                     'salesforce_to_odoo',\r\n                                                                     \"Created Successfully\")\r\n\r\n                return created_record.id if created_record else False\r\n        else:\r\n            return False\r\n        \r\n    def _check_if_mapping_exist(self, sf_model):\r\n        odoo_model = self.env['sf.model.mapping'].search([('sf_model', '=', sf_model)])\r\n        return odoo_model if odoo_model else False\r\n            \r\n    def _create_records_in_odoo(self, model, sf_model, records):\r\n        try:\r\n            create_list = []\r\n            for rec in records:\r\n                if sf_model in ['Account', 'Contact', 'Individual']:\r\n                    if sf_model == 'Account':\r\n                        id_field = 'sf_account_id'\r\n                    elif sf_model == 'Contact':\r\n                        id_field = 'sf_contact_id'\r\n                    else:\r\n                        id_field = 'sf_individual_id'\r\n                else:\r\n                    id_field = 'sf_id'\r\n                record_exist = self.env[model].search([(id_field, '=', rec.get(id_field)),\r\n                                                       (id_field, '!=', False),\r\n                                                       ('active', 'in', [True, False])], limit=1)\r\n                if record_exist:\r\n                    # check record exist for which sf_model\r\n                    # if for Accounts we have to deal with Addresses otherwise same address can replicate multiple times\r\n                    if id_field == 'sf_account_id':\r\n                        print('A partner already exist with this id')\r\n                        address_type_to_id = {}\r\n\r\n                        old_addresses = record_exist.child_ids.ids if record_exist.child_ids else None\r\n\r\n                        if old_addresses is not None:\r\n                            for address_id in old_addresses:\r\n                                address_record = self.env[model].search([('id', '=', address_id)])\r\n                                print(address_record)\r\n                                if address_record.type in ['delivery', 'invoice', 'other']:\r\n                                    address_type_to_id[address_record.type] = address_id\r\n\r\n                            new_child_ids = []\r\n                            for incoming_address in rec.get('child_ids', []):\r\n                                current_address_type = incoming_address[2]['type']\r\n\r\n                                if current_address_type in address_type_to_id:\r\n                                    new_child_ids.append((1, address_type_to_id[current_address_type], incoming_address[2]))\r\n                                else:\r\n                                    new_child_ids.append(incoming_address)\r\n\r\n                            rec.update({'child_ids': new_child_ids, 'is_company': True})\r\n\r\n                        else:\r\n                            rec.update({'is_company': True})\r\n\r\n                    elif sf_model == 'Opportunity':\r\n                        # when it is an Opportunity we first write the record and then we check for tags\r\n                        # otherwise the write operation afterwards will override by it\r\n                        record_exist.write(rec)\r\n                        self.update_opportunity(record_exist)\r\n                        continue\r\n\r\n                    # records other than opportunity and accounts\r\n                    record_exist.write(rec)\r\n\r\n                    # for country mapping\r\n                    if sf_model in ['Account', 'Contact', 'Individual']:\r\n                        self.update_country_mapping(record_exist.id)\r\n                        self.update_state_mapping(record_exist.id)\r\n\r\n                    self.env['salesforce.sync.history'].create_log_param( sf_model, rec.get( id_field ), 'success',\r\n                                                                          'salesforce_to_odoo',\r\n                                                                          \"Updated Successfully\" )\r\n                else:\r\n                    create_list.append(rec)\r\n            if create_list:\r\n                if model == 'res.partner' and sf_model == 'Account':\r\n                    for single_record in create_list:\r\n                        single_record.update({'is_company': True})\r\n                res = self.env[model].create(create_list)\r\n\r\n                if res:\r\n                    # if the created record is for account model then for country mapping call update_country_mapping\r\n                    if sf_model in ['Account', 'Contact', 'Individual']:\r\n                        for new_record in res:\r\n                            self.update_country_mapping(new_record.id)\r\n                            self.update_state_mapping(new_record.id)\r\n\r\n                    # if sf_model is Opportunity then we need to update the tags and take additional actions\r\n                    if sf_model == 'Opportunity':\r\n                        for new_record in res:\r\n                            self.update_opportunity(new_record)\r\n\r\n                    if sf_model == 'Lead':\r\n                        for new_record in res:\r\n                            print(sf_model)\r\n                    self.env['salesforce.sync.history'].create_log_param( sf_model, '', 'success', 'salesforce_to_odoo',\r\n                                                                          str(len(res)) + \" \" + sf_model +\r\n                                                                          \" records created successfully\" )\r\n\r\n        except Exception as e:\r\n            raise e\r\n\r\n    def update_country_mapping(self, partner_id):\r\n        # first if the account have child ids i.e;Billing and Shipping Address\r\n        # get all addresses\r\n        all_partner_ids = [partner_id]\r\n        this_partner = self.env['res.partner'].search([('id', '=', partner_id)])\r\n\r\n        if this_partner.child_ids.ids:\r\n            all_partner_ids.extend(this_partner.child_ids.ids)\r\n\r\n        for every_address in all_partner_ids:\r\n            # get the partner_id of the address\r\n            that_partner = self.env['res.partner'].search([('id', '=', every_address)])\r\n            # search the sf country in country mapping\r\n\r\n            if that_partner.sf_country_name:\r\n                country_matched = None\r\n                given_country = that_partner.sf_country_name\r\n                # get the exact sf_country_name from the mapping if not found then create one\r\n                countries = self.env['sf.country.map'].search([('sf_country_name', 'ilike', that_partner.sf_country_name)])\r\n                for matched_country in countries:\r\n                    if matched_country.sf_country_name.lower() == given_country.lower():\r\n                        country_matched = matched_country\r\n                        break\r\n\r\n                if country_matched:\r\n                    # if we find matched country in country mapping then we will update the country id of\r\n                    # partner to the mapped country_id\r\n                    that_partner.write({'country_id': country_matched.sf_our_matched_country.id})\r\n                    country_matched.write({'sf_res_partner_ids': [(4, every_address)]})\r\n                    country_matched.env.cr.commit()\r\n\r\n                # else if  no mapping for sf country name then create a mapping\r\n                else:\r\n                    # first check if there is country name in in partner\r\n                    if that_partner.sf_country_name:\r\n                        new_country_map = self.env['sf.country.map'].create({\r\n                            'sf_country_name': that_partner.sf_country_name,\r\n                            'sf_our_matched_country': that_partner.country_id.id,\r\n                            'sf_res_partner_ids': [(4, every_address)]})\r\n\r\n                        if new_country_map:\r\n                            _logger.info(f'{that_partner.sf_country_name} -> {that_partner.country_id.name}'\r\n                                         f' new country mapping added')\r\n\r\n    def update_state_mapping(self, partner_id):\r\n        # first if the account have child ids i.e;Billing and Shipping Address\r\n        # get all addresses\r\n        all_partner_ids = [partner_id]\r\n        this_partner = self.env['res.partner'].search( [('id', '=', partner_id)])\r\n\r\n        if this_partner.child_ids.ids:\r\n            all_partner_ids.extend(this_partner.child_ids.ids)\r\n\r\n        for every_address in all_partner_ids:\r\n            # get the partner_id of the address\r\n            that_partner = self.env['res.partner'].search([('id', '=', every_address)])\r\n            # search the sf_state in state mapping\r\n\r\n            if that_partner.sf_state:\r\n                state_matched = None\r\n                given_state = that_partner.sf_state\r\n                # get the exact sf_country_name from the mapping if not found then create one\r\n                states = self.env['sf.state.map'].search([('sf_state_name', 'ilike', that_partner.sf_state)])\r\n                for matched_states in states:\r\n                    if matched_states.sf_state_name.lower() == given_state.lower():\r\n                        state_matched = matched_states\r\n                        break\r\n\r\n                if state_matched:\r\n                    # if we find matched state in state mapping then we will update the state id of partner\r\n                    # to the mapped state_id\r\n                    that_partner.write({'state_id': state_matched.sf_our_matched_state.id})\r\n                    state_matched.write({'sf_res_partner_ids': [(4, every_address)]})\r\n                    state_matched.env.cr.commit()\r\n\r\n                # else if  no mapping for sf state name then create a mapping\r\n                else:\r\n                    # first check if there is sf_state  in partner\r\n                    if that_partner.sf_state:\r\n                        new_state_map = self.env['sf.state.map'].create({\r\n                            'sf_state_name': that_partner.sf_state,\r\n                            'sf_our_matched_state': that_partner.state_id.id,\r\n                            'sf_res_partner_ids': [(4, every_address)]})\r\n\r\n                        if new_state_map:\r\n                            _logger.info(f'{that_partner.sf_state} -> {that_partner.state_id.name}'\r\n                                         f' new state mapping added')\r\n\r\n    # update opportunity record\r\n    def update_opportunity(self, new_record):\r\n        #: when stage changed  or done some action on opportunity the date_closed will change accordingly so\r\n        # print(f\"{new_record.name} ===> {new_record.date_closed}\")\r\n        other_actions = self.env['sf.stages.mapping'].search([(\"sf_stage_name\", \"=\", new_record.sf_stage_name)])\r\n        if other_actions.tags:\r\n            print( other_actions.tags.id )\r\n            new_record.write({'tag_ids': [(4, other_actions.tags.id)]})\r\n            print(new_record)\r\n\r\n        if other_actions.mark == 'lost':\r\n            result = new_record.action_set_lost(lost_reason=False, won_status='lost')\r\n\r\n        if other_actions.mark == 'won':\r\n            new_record.action_set_won_rainbowman()\r\n\r\n        if other_actions.mark == 'archive':\r\n            new_record.toggle_active()\r\n\r\n        new_record.write({'date_closed': new_record.sf_closed_date})\r\n\r\n    def _check_existing_value(self, value, model, sf_model):\r\n        if value:\r\n            if sf_model in ['Account', 'Contact', 'Individual']:\r\n                if sf_model == 'Account':\r\n                    id_field = 'sf_account_id'\r\n                elif sf_model == 'Contact':\r\n                    id_field = 'sf_contact_id'\r\n                else:\r\n                    id_field = 'sf_individual_id'\r\n            else:\r\n                id_field = 'sf_id'\r\n            record_exist = self.env[model].search([(id_field, '=', value)], limit=1)\r\n            return record_exist if record_exist else False\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/../salesforce_connector/models/salesforce_importer.py b/../salesforce_connector/models/salesforce_importer.py
--- a/../salesforce_connector/models/salesforce_importer.py	(revision 1d212c13d7678383144751f05cf4ef0c2c556b0b)
+++ b/../salesforce_connector/models/salesforce_importer.py	(date 1632729825464)
@@ -85,8 +85,8 @@
 
         :return:
         """
-        if self.accounts or self.products or self.sales_orders or self.opportunities or self.contacts or \
-                self.individuals or self.partner_ntwrk_con or self.pricebook or self.rep__c or self.leads or self.tasks or self.geographic_scope:
+        if self.geographic_scope or self.accounts or self.products or self.sales_orders or self.opportunities or self.contacts or \
+                self.individuals or self.partner_ntwrk_con or self.pricebook or self.rep__c or self.leads or self.tasks:
             self.create_job_queues()
         else:
             raise Warning(_("No Option Checked.",))
@@ -151,7 +151,7 @@
                                        self.max_rec_per_job)
 
         if self.geographic_scope:
-            self._add_records_to_queue('Scopes', 'model_geographic_scope', self.from_date, self.to_date, self.include_custm,
+            self._add_records_to_queue('User', 'res.users', self.from_date, self.to_date, self.include_custm,
                                        self.max_rec_per_job)
 
         if self.sales_orders:
@@ -198,7 +198,7 @@
             self.connect_to_salesforce()
         query = "SELECT COUNT(Id) FROM {sf_model} where LastModifiedDate > {from_date} and LastModifiedDate < {to_date}".format\
             (sf_model=sf_model,from_date=from_date.strftime('%Y-%m-%dT%H:%M:%SZ'), to_date=to_date.strftime('%Y-%m-%dT%H:%M:%SZ'))
-        records = self.sales_force.query_all(query)['records']
+        records = type(self).sales_force.query_all(query)['records']
         print('total records are ', records[0].get('expr0'))
         return records[0].get('expr0')
 
@@ -274,8 +274,7 @@
                 return {'__not_needed_record': True}
 
             #: check if this lead is converted to opportunity in odoo
-            is_lead_converted_to_opportunity = self.env['crm.lead'].search([
-                ('sf_id', '=', sf_data.get('Id')), ('type', '=', 'opportunity')])
+            is_lead_converted_to_opportunity = self.env['crm.lead'].search([('type', '=', 'opportunity')]) #('sf_id', '=', sf_data.get('Id')), 
 
             #: if lead is converted to opportunity in odoo then skip this id
             if is_lead_converted_to_opportunity:
